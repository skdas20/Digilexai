{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\piyus\\\\Downloads\\\\legal\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport Web3 from 'web3';\nimport { useAuth } from './AuthContext';\nimport { authAPI } from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\nexport const Web3Provider = ({\n  children\n}) => {\n  _s();\n  const {\n    user,\n    isAuthenticated\n  } = useAuth();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [isConnecting, setIsConnecting] = useState(false);\n  const [error, setError] = useState(null);\n\n  // Initialize Web3\n  useEffect(() => {\n    const initWeb3 = async () => {\n      try {\n        let web3Instance;\n\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          web3Instance = new Web3(window.ethereum);\n          setWeb3(web3Instance);\n\n          // Get network ID\n          const networkId = await web3Instance.eth.net.getId();\n          setNetworkId(networkId);\n\n          // Check if already connected\n          const accounts = await web3Instance.eth.getAccounts();\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n\n            // Update user's wallet address in the database if logged in\n            if (isAuthenticated && accounts[0] !== (user === null || user === void 0 ? void 0 : user.walletAddress)) {\n              updateUserWallet(accounts[0]);\n            }\n          }\n\n          // Listen for account changes\n          window.ethereum.on('accountsChanged', accounts => {\n            if (accounts.length > 0) {\n              setAccount(accounts[0]);\n              // Update user's wallet address in the database if logged in\n              if (isAuthenticated && accounts[0] !== (user === null || user === void 0 ? void 0 : user.walletAddress)) {\n                updateUserWallet(accounts[0]);\n              }\n            } else {\n              setAccount(null);\n            }\n          });\n\n          // Listen for network changes\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n        } else {\n          // If MetaMask is not installed, use a read-only provider\n          const provider = new Web3.providers.HttpProvider(process.env.REACT_APP_WEB3_PROVIDER_URL);\n          web3Instance = new Web3(provider);\n          setWeb3(web3Instance);\n          setNetworkId(await web3Instance.eth.net.getId());\n          console.log('MetaMask not installed. Using read-only mode.');\n        }\n      } catch (error) {\n        console.error('Error initializing Web3:', error);\n        setError('Failed to initialize Web3. Please refresh the page and try again.');\n      }\n    };\n    initWeb3();\n\n    // Cleanup function\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners('accountsChanged');\n        window.ethereum.removeAllListeners('chainChanged');\n      }\n    };\n  }, [isAuthenticated, user]);\n\n  // Update user's wallet address in the database\n  const updateUserWallet = async address => {\n    try {\n      await authAPI.updateWallet(address);\n    } catch (error) {\n      console.error('Error updating wallet address:', error);\n    }\n  };\n\n  // Connect wallet\n  const connectWallet = async () => {\n    if (!web3) {\n      setError('Web3 not initialized. Please refresh the page and try again.');\n      return;\n    }\n    if (!window.ethereum) {\n      setError('MetaMask not installed. Please install MetaMask to connect your wallet.');\n      return;\n    }\n    setIsConnecting(true);\n    setError(null);\n    try {\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      if (accounts.length > 0) {\n        setAccount(accounts[0]);\n\n        // Update user's wallet address in the database if logged in\n        if (isAuthenticated && accounts[0] !== (user === null || user === void 0 ? void 0 : user.walletAddress)) {\n          await updateUserWallet(accounts[0]);\n        }\n      }\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      setError('Failed to connect wallet. Please try again.');\n    } finally {\n      setIsConnecting(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setAccount(null);\n  };\n  const value = {\n    web3,\n    account,\n    networkId,\n    isConnecting,\n    error,\n    connectWallet,\n    disconnectWallet\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 146,\n    columnNumber: 10\n  }, this);\n};\n_s(Web3Provider, \"zBKL3+f3xidE88twu3DCaJa2N/c=\", false, function () {\n  return [useAuth];\n});\n_c = Web3Provider;\nexport const useWeb3 = () => {\n  _s2();\n  const context = useContext(Web3Context);\n  if (context === undefined) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s2(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Web3","useAuth","authAPI","jsxDEV","_jsxDEV","Web3Context","Web3Provider","children","_s","user","isAuthenticated","web3","setWeb3","account","setAccount","networkId","setNetworkId","isConnecting","setIsConnecting","error","setError","initWeb3","web3Instance","window","ethereum","eth","net","getId","accounts","getAccounts","length","walletAddress","updateUserWallet","on","location","reload","provider","providers","HttpProvider","process","env","REACT_APP_WEB3_PROVIDER_URL","console","log","removeAllListeners","address","updateWallet","connectWallet","request","method","disconnectWallet","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWeb3","_s2","context","undefined","Error","$RefreshReg$"],"sources":["C:/Users/piyus/Downloads/legal/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\nimport { useAuth } from './AuthContext';\r\nimport { authAPI } from '../utils/api';\r\n\r\nconst Web3Context = createContext();\r\n\r\nexport const Web3Provider = ({ children }) => {\r\n  const { user, isAuthenticated } = useAuth();\r\n  const [web3, setWeb3] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [networkId, setNetworkId] = useState(null);\r\n  const [isConnecting, setIsConnecting] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Initialize Web3\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      try {\r\n        let web3Instance;\r\n\r\n        // Check if MetaMask is installed\r\n        if (window.ethereum) {\r\n          web3Instance = new Web3(window.ethereum);\r\n          setWeb3(web3Instance);\r\n\r\n          // Get network ID\r\n          const networkId = await web3Instance.eth.net.getId();\r\n          setNetworkId(networkId);\r\n\r\n          // Check if already connected\r\n          const accounts = await web3Instance.eth.getAccounts();\r\n          if (accounts.length > 0) {\r\n            setAccount(accounts[0]);\r\n            \r\n            // Update user's wallet address in the database if logged in\r\n            if (isAuthenticated && accounts[0] !== user?.walletAddress) {\r\n              updateUserWallet(accounts[0]);\r\n            }\r\n          }\r\n\r\n          // Listen for account changes\r\n          window.ethereum.on('accountsChanged', (accounts) => {\r\n            if (accounts.length > 0) {\r\n              setAccount(accounts[0]);\r\n              // Update user's wallet address in the database if logged in\r\n              if (isAuthenticated && accounts[0] !== user?.walletAddress) {\r\n                updateUserWallet(accounts[0]);\r\n              }\r\n            } else {\r\n              setAccount(null);\r\n            }\r\n          });\r\n\r\n          // Listen for network changes\r\n          window.ethereum.on('chainChanged', () => {\r\n            window.location.reload();\r\n          });\r\n        } else {\r\n          // If MetaMask is not installed, use a read-only provider\r\n          const provider = new Web3.providers.HttpProvider(\r\n            process.env.REACT_APP_WEB3_PROVIDER_URL\r\n          );\r\n          web3Instance = new Web3(provider);\r\n          setWeb3(web3Instance);\r\n          setNetworkId(await web3Instance.eth.net.getId());\r\n          console.log('MetaMask not installed. Using read-only mode.');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing Web3:', error);\r\n        setError('Failed to initialize Web3. Please refresh the page and try again.');\r\n      }\r\n    };\r\n\r\n    initWeb3();\r\n\r\n    // Cleanup function\r\n    return () => {\r\n      if (window.ethereum) {\r\n        window.ethereum.removeAllListeners('accountsChanged');\r\n        window.ethereum.removeAllListeners('chainChanged');\r\n      }\r\n    };\r\n  }, [isAuthenticated, user]);\r\n\r\n  // Update user's wallet address in the database\r\n  const updateUserWallet = async (address) => {\r\n    try {\r\n      await authAPI.updateWallet(address);\r\n    } catch (error) {\r\n      console.error('Error updating wallet address:', error);\r\n    }\r\n  };\r\n\r\n  // Connect wallet\r\n  const connectWallet = async () => {\r\n    if (!web3) {\r\n      setError('Web3 not initialized. Please refresh the page and try again.');\r\n      return;\r\n    }\r\n\r\n    if (!window.ethereum) {\r\n      setError('MetaMask not installed. Please install MetaMask to connect your wallet.');\r\n      return;\r\n    }\r\n\r\n    setIsConnecting(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const accounts = await window.ethereum.request({\r\n        method: 'eth_requestAccounts',\r\n      });\r\n\r\n      if (accounts.length > 0) {\r\n        setAccount(accounts[0]);\r\n        \r\n        // Update user's wallet address in the database if logged in\r\n        if (isAuthenticated && accounts[0] !== user?.walletAddress) {\r\n          await updateUserWallet(accounts[0]);\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('Error connecting wallet:', error);\r\n      setError('Failed to connect wallet. Please try again.');\r\n    } finally {\r\n      setIsConnecting(false);\r\n    }\r\n  };\r\n\r\n  // Disconnect wallet\r\n  const disconnectWallet = () => {\r\n    setAccount(null);\r\n  };\r\n\r\n  const value = {\r\n    web3,\r\n    account,\r\n    networkId,\r\n    isConnecting,\r\n    error,\r\n    connectWallet,\r\n    disconnectWallet\r\n  };\r\n\r\n  return <Web3Context.Provider value={value}>{children}</Web3Context.Provider>;\r\n};\r\n\r\nexport const useWeb3 = () => {\r\n  const context = useContext(Web3Context);\r\n  if (context === undefined) {\r\n    throw new Error('useWeb3 must be used within a Web3Provider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}