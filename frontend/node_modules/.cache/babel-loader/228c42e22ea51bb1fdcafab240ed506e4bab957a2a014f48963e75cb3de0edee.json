{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODES\\\\legal\\\\legal\\\\frontend\\\\src\\\\components\\\\TypingEffect.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TypingEffect = ({\n  text,\n  speed = 30,\n  onComplete\n}) => {\n  _s();\n  const [displayedText, setDisplayedText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timeout = setTimeout(() => {\n        setDisplayedText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n      }, speed);\n      return () => clearTimeout(timeout);\n    } else {\n      setIsComplete(true);\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [currentIndex, text, speed, onComplete]);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    className: \"whitespace-pre-wrap\",\n    children: [displayedText, !isComplete && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"animate-pulse\",\n      children: \"|\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 23\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 5\n  }, this);\n};\n_s(TypingEffect, \"/7C/Ej5ngRTzxAI8ZtYVDxRNo/4=\");\n_c = TypingEffect;\nexport default TypingEffect;\nvar _c;\n$RefreshReg$(_c, \"TypingEffect\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","TypingEffect","text","speed","onComplete","_s","displayedText","setDisplayedText","currentIndex","setCurrentIndex","isComplete","setIsComplete","length","timeout","setTimeout","prev","clearTimeout","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/CODES/legal/legal/frontend/src/components/TypingEffect.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TypingEffect = ({ text, speed = 30, onComplete }) => {\n  const [displayedText, setDisplayedText] = useState('');\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [isComplete, setIsComplete] = useState(false);\n\n  useEffect(() => {\n    if (currentIndex < text.length) {\n      const timeout = setTimeout(() => {\n        setDisplayedText(prev => prev + text[currentIndex]);\n        setCurrentIndex(prev => prev + 1);\n      }, speed);\n      \n      return () => clearTimeout(timeout);\n    } else {\n      setIsComplete(true);\n      if (onComplete) {\n        onComplete();\n      }\n    }\n  }, [currentIndex, text, speed, onComplete]);\n\n  return (\n    <span className=\"whitespace-pre-wrap\">\n      {displayedText}\n      {!isComplete && <span className=\"animate-pulse\">|</span>}\n    </span>\n  );\n};\n\nexport default TypingEffect; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAGA,CAAC;EAAEC,IAAI;EAAEC,KAAK,GAAG,EAAE;EAAEC;AAAW,CAAC,KAAK;EAAAC,EAAA;EACzD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACtD,MAAM,CAACW,YAAY,EAAEC,eAAe,CAAC,GAAGZ,QAAQ,CAAC,CAAC,CAAC;EACnD,MAAM,CAACa,UAAU,EAAEC,aAAa,CAAC,GAAGd,QAAQ,CAAC,KAAK,CAAC;EAEnDC,SAAS,CAAC,MAAM;IACd,IAAIU,YAAY,GAAGN,IAAI,CAACU,MAAM,EAAE;MAC9B,MAAMC,OAAO,GAAGC,UAAU,CAAC,MAAM;QAC/BP,gBAAgB,CAACQ,IAAI,IAAIA,IAAI,GAAGb,IAAI,CAACM,YAAY,CAAC,CAAC;QACnDC,eAAe,CAACM,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC;MACnC,CAAC,EAAEZ,KAAK,CAAC;MAET,OAAO,MAAMa,YAAY,CAACH,OAAO,CAAC;IACpC,CAAC,MAAM;MACLF,aAAa,CAAC,IAAI,CAAC;MACnB,IAAIP,UAAU,EAAE;QACdA,UAAU,CAAC,CAAC;MACd;IACF;EACF,CAAC,EAAE,CAACI,YAAY,EAAEN,IAAI,EAAEC,KAAK,EAAEC,UAAU,CAAC,CAAC;EAE3C,oBACEJ,OAAA;IAAMiB,SAAS,EAAC,qBAAqB;IAAAC,QAAA,GAClCZ,aAAa,EACb,CAACI,UAAU,iBAAIV,OAAA;MAAMiB,SAAS,EAAC,eAAe;MAAAC,QAAA,EAAC;IAAC;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAM,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpD,CAAC;AAEX,CAAC;AAACjB,EAAA,CA3BIJ,YAAY;AAAAsB,EAAA,GAAZtB,YAAY;AA6BlB,eAAeA,YAAY;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}