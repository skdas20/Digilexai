{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  logout: () => api.post('/auth/logout'),\n  getMe: () => api.get('/auth/me'),\n  updateWallet: walletAddress => api.put('/auth/wallet', {\n    walletAddress\n  })\n};\n\n// Document API\nexport const documentAPI = {\n  createDocument: documentData => api.post('/documents', documentData),\n  getUserDocuments: () => api.get('/documents/user'),\n  getDocument: id => api.get(`/documents/${id}`),\n  updateDocument: (id, documentData) => api.put(`/documents/${id}`, documentData),\n  updateDocumentBlockchain: (id, blockchainData) => api.put(`/documents/${id}/blockchain`, blockchainData),\n  deleteDocument: id => api.delete(`/documents/${id}`)\n};\n\n// DAO API\nexport const daoAPI = {\n  createDAO: daoData => api.post('/daos', daoData),\n  getUserDAOs: () => api.get('/daos/user/me'),\n  getDAO: id => api.get(`/daos/${id}`),\n  updateDAO: (id, daoData) => api.put(`/daos/${id}`, daoData),\n  updateDAOBlockchain: (id, blockchainData) => api.put(`/daos/${id}/blockchain`, blockchainData),\n  deleteDAO: id => api.delete(`/daos/${id}`)\n};\n\n// AI API\nexport const aiAPI = {\n  generateDocument: (documentType, parameters) => api.post('/ai/generate-document', {\n    documentType,\n    parameters\n  }),\n  reviewContract: contractCode => api.post('/ai/review-contract', {\n    contractCode\n  }),\n  chat: async (message, conversation) => {\n    try {\n      console.log('Sending chat request:', {\n        message,\n        conversationLength: conversation.length\n      });\n\n      // Ensure conversation is properly formatted\n      const formattedConversation = conversation.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n      const response = await api.post('/ai/chat', {\n        message,\n        conversation: formattedConversation\n      });\n      console.log('Chat response received:', response);\n      return response;\n    } catch (error) {\n      console.error('Error in chat API call:', error);\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","api","create","baseURL","withCredentials","authAPI","register","userData","post","login","credentials","logout","getMe","get","updateWallet","walletAddress","put","documentAPI","createDocument","documentData","getUserDocuments","getDocument","id","updateDocument","updateDocumentBlockchain","blockchainData","deleteDocument","delete","daoAPI","createDAO","daoData","getUserDAOs","getDAO","updateDAO","updateDAOBlockchain","deleteDAO","aiAPI","generateDocument","documentType","parameters","reviewContract","contractCode","chat","message","conversation","console","log","conversationLength","length","formattedConversation","map","msg","role","content","response","error"],"sources":["D:/CODES/legal/legal/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  withCredentials: true\r\n});\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  logout: () => api.post('/auth/logout'),\r\n  getMe: () => api.get('/auth/me'),\r\n  updateWallet: (walletAddress) => api.put('/auth/wallet', { walletAddress })\r\n};\r\n\r\n// Document API\r\nexport const documentAPI = {\r\n  createDocument: (documentData) => api.post('/documents', documentData),\r\n  getUserDocuments: () => api.get('/documents/user'),\r\n  getDocument: (id) => api.get(`/documents/${id}`),\r\n  updateDocument: (id, documentData) => api.put(`/documents/${id}`, documentData),\r\n  updateDocumentBlockchain: (id, blockchainData) => api.put(`/documents/${id}/blockchain`, blockchainData),\r\n  deleteDocument: (id) => api.delete(`/documents/${id}`)\r\n};\r\n\r\n// DAO API\r\nexport const daoAPI = {\r\n  createDAO: (daoData) => api.post('/daos', daoData),\r\n  getUserDAOs: () => api.get('/daos/user/me'),\r\n  getDAO: (id) => api.get(`/daos/${id}`),\r\n  updateDAO: (id, daoData) => api.put(`/daos/${id}`, daoData),\r\n  updateDAOBlockchain: (id, blockchainData) => api.put(`/daos/${id}/blockchain`, blockchainData),\r\n  deleteDAO: (id) => api.delete(`/daos/${id}`)\r\n};\r\n\r\n// AI API\r\nexport const aiAPI = {\r\n  generateDocument: (documentType, parameters) => \r\n    api.post('/ai/generate-document', { documentType, parameters }),\r\n  reviewContract: (contractCode) => \r\n    api.post('/ai/review-contract', { contractCode }),\r\n  chat: async (message, conversation) => {\r\n    try {\r\n      console.log('Sending chat request:', { message, conversationLength: conversation.length });\r\n      \r\n      // Ensure conversation is properly formatted\r\n      const formattedConversation = conversation.map(msg => ({\r\n        role: msg.role,\r\n        content: msg.content\r\n      }));\r\n      \r\n      const response = await api.post('/ai/chat', { \r\n        message, \r\n        conversation: formattedConversation \r\n      });\r\n      \r\n      console.log('Chat response received:', response);\r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error in chat API call:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}