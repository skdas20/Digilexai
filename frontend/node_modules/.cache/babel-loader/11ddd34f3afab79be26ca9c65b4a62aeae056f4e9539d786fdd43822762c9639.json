{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\piyus\\\\Downloads\\\\legal\\\\frontend\\\\src\\\\context\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { ethers } from 'ethers';\nimport { useAuth } from './AuthContext';\n\n// Contract ABIs\nimport LegalDocumentABI from '../artifacts/contracts/LegalDocument.sol/LegalDocument.json';\nimport DAOFactoryABI from '../artifacts/contracts/DAOFactory.sol/DAOFactory.json';\nimport TokenRewardABI from '../artifacts/contracts/TokenReward.sol/LegalAssistantToken.json';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\nexport const useWeb3 = () => {\n  _s();\n  return useContext(Web3Context);\n};\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const {\n    user,\n    updateWalletAddress\n  } = useAuth();\n  const [provider, setProvider] = useState(null);\n  const [signer, setSigner] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [chainId, setChainId] = useState(null);\n  const [connected, setConnected] = useState(false);\n  const [contracts, setContracts] = useState({\n    legalDocument: null,\n    daoFactory: null,\n    tokenReward: null\n  });\n\n  // Contract addresses (to be updated after deployment)\n  const contractAddresses = {\n    legalDocument: process.env.REACT_APP_LEGAL_DOCUMENT_ADDRESS || '',\n    daoFactory: process.env.REACT_APP_DAO_FACTORY_ADDRESS || '',\n    tokenReward: process.env.REACT_APP_TOKEN_REWARD_ADDRESS || ''\n  };\n\n  // Mumbai Testnet Chain ID\n  const MUMBAI_CHAIN_ID = '0x13881';\n\n  // Initialize provider and check if MetaMask is installed\n  useEffect(() => {\n    const initProvider = async () => {\n      // Check if MetaMask is installed\n      if (window.ethereum) {\n        try {\n          // Create ethers provider\n          const provider = new ethers.BrowserProvider(window.ethereum);\n          setProvider(provider);\n\n          // Get network\n          const network = await provider.getNetwork();\n          setChainId(network.chainId.toString());\n\n          // Check if already connected\n          const accounts = await provider.listAccounts();\n          if (accounts.length > 0) {\n            setAccount(accounts[0].address);\n            setSigner(await provider.getSigner());\n            setConnected(true);\n          }\n        } catch (error) {\n          console.error('Error initializing provider:', error);\n        }\n      } else {\n        console.log('Please install MetaMask!');\n      }\n    };\n    initProvider();\n  }, []);\n\n  // Initialize contracts when provider and addresses are available\n  useEffect(() => {\n    const initContracts = async () => {\n      if (provider && contractAddresses.legalDocument && contractAddresses.daoFactory && contractAddresses.tokenReward) {\n        try {\n          const legalDocument = new ethers.Contract(contractAddresses.legalDocument, LegalDocumentABI.abi, provider);\n          const daoFactory = new ethers.Contract(contractAddresses.daoFactory, DAOFactoryABI.abi, provider);\n          const tokenReward = new ethers.Contract(contractAddresses.tokenReward, TokenRewardABI.abi, provider);\n          setContracts({\n            legalDocument,\n            daoFactory,\n            tokenReward\n          });\n        } catch (error) {\n          console.error('Error initializing contracts:', error);\n        }\n      }\n    };\n    initContracts();\n  }, [provider, contractAddresses.legalDocument, contractAddresses.daoFactory, contractAddresses.tokenReward]);\n\n  // Listen for account changes\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = async accounts => {\n        if (accounts.length > 0) {\n          setAccount(accounts[0]);\n          setSigner(await provider.getSigner());\n          setConnected(true);\n\n          // Update wallet address in backend if user is logged in\n          if (user) {\n            await updateWalletAddress(accounts[0]);\n          }\n        } else {\n          setAccount(null);\n          setSigner(null);\n          setConnected(false);\n        }\n      };\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n      };\n    }\n  }, [provider, user, updateWalletAddress]);\n\n  // Listen for chain changes\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleChainChanged = chainId => {\n        setChainId(chainId);\n        window.location.reload();\n      };\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n\n  // Connect to MetaMask\n  const connectWallet = async () => {\n    if (window.ethereum) {\n      try {\n        // Request account access\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n\n        // Check if on Mumbai Testnet\n        const chainId = await window.ethereum.request({\n          method: 'eth_chainId'\n        });\n        if (chainId !== MUMBAI_CHAIN_ID) {\n          try {\n            // Switch to Mumbai Testnet\n            await window.ethereum.request({\n              method: 'wallet_switchEthereumChain',\n              params: [{\n                chainId: MUMBAI_CHAIN_ID\n              }]\n            });\n          } catch (switchError) {\n            // If Mumbai Testnet is not added, add it\n            if (switchError.code === 4902) {\n              await window.ethereum.request({\n                method: 'wallet_addEthereumChain',\n                params: [{\n                  chainId: MUMBAI_CHAIN_ID,\n                  chainName: 'Polygon Mumbai Testnet',\n                  nativeCurrency: {\n                    name: 'MATIC',\n                    symbol: 'MATIC',\n                    decimals: 18\n                  },\n                  rpcUrls: ['https://rpc-mumbai.maticvigil.com'],\n                  blockExplorerUrls: ['https://mumbai.polygonscan.com']\n                }]\n              });\n            } else {\n              throw switchError;\n            }\n          }\n        }\n        setAccount(accounts[0]);\n        setSigner(await provider.getSigner());\n        setConnected(true);\n\n        // Update wallet address in backend if user is logged in\n        if (user) {\n          await updateWalletAddress(accounts[0]);\n        }\n        return {\n          success: true\n        };\n      } catch (error) {\n        console.error('Error connecting to MetaMask:', error);\n        return {\n          success: false,\n          message: error.message || 'Failed to connect to MetaMask'\n        };\n      }\n    } else {\n      return {\n        success: false,\n        message: 'MetaMask is not installed'\n      };\n    }\n  };\n\n  // Get contract with signer\n  const getContractWithSigner = contractName => {\n    if (!signer || !contracts[contractName]) {\n      return null;\n    }\n    return contracts[contractName].connect(signer);\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: {\n      provider,\n      signer,\n      account,\n      chainId,\n      connected,\n      contracts,\n      connectWallet,\n      getContractWithSigner\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 226,\n    columnNumber: 5\n  }, this);\n};\n_s2(Web3Provider, \"pytzavc7zSPSZVEsMvNuLEQYojQ=\", false, function () {\n  return [useAuth];\n});\n_c = Web3Provider;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","ethers","useAuth","LegalDocumentABI","DAOFactoryABI","TokenRewardABI","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","Web3Provider","children","_s2","user","updateWalletAddress","provider","setProvider","signer","setSigner","account","setAccount","chainId","setChainId","connected","setConnected","contracts","setContracts","legalDocument","daoFactory","tokenReward","contractAddresses","process","env","REACT_APP_LEGAL_DOCUMENT_ADDRESS","REACT_APP_DAO_FACTORY_ADDRESS","REACT_APP_TOKEN_REWARD_ADDRESS","MUMBAI_CHAIN_ID","initProvider","window","ethereum","BrowserProvider","network","getNetwork","toString","accounts","listAccounts","length","address","getSigner","error","console","log","initContracts","Contract","abi","handleAccountsChanged","on","removeListener","handleChainChanged","location","reload","connectWallet","request","method","params","switchError","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","success","message","getContractWithSigner","contractName","connect","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/piyus/Downloads/legal/frontend/src/context/Web3Context.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { ethers } from 'ethers';\r\nimport { useAuth } from './AuthContext';\r\n\r\n// Contract ABIs\r\nimport LegalDocumentABI from '../artifacts/contracts/LegalDocument.sol/LegalDocument.json';\r\nimport DAOFactoryABI from '../artifacts/contracts/DAOFactory.sol/DAOFactory.json';\r\nimport TokenRewardABI from '../artifacts/contracts/TokenReward.sol/LegalAssistantToken.json';\r\n\r\nconst Web3Context = createContext();\r\n\r\nexport const useWeb3 = () => useContext(Web3Context);\r\n\r\nexport const Web3Provider = ({ children }) => {\r\n  const { user, updateWalletAddress } = useAuth();\r\n  \r\n  const [provider, setProvider] = useState(null);\r\n  const [signer, setSigner] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [chainId, setChainId] = useState(null);\r\n  const [connected, setConnected] = useState(false);\r\n  const [contracts, setContracts] = useState({\r\n    legalDocument: null,\r\n    daoFactory: null,\r\n    tokenReward: null\r\n  });\r\n  \r\n  // Contract addresses (to be updated after deployment)\r\n  const contractAddresses = {\r\n    legalDocument: process.env.REACT_APP_LEGAL_DOCUMENT_ADDRESS || '',\r\n    daoFactory: process.env.REACT_APP_DAO_FACTORY_ADDRESS || '',\r\n    tokenReward: process.env.REACT_APP_TOKEN_REWARD_ADDRESS || ''\r\n  };\r\n  \r\n  // Mumbai Testnet Chain ID\r\n  const MUMBAI_CHAIN_ID = '0x13881';\r\n  \r\n  // Initialize provider and check if MetaMask is installed\r\n  useEffect(() => {\r\n    const initProvider = async () => {\r\n      // Check if MetaMask is installed\r\n      if (window.ethereum) {\r\n        try {\r\n          // Create ethers provider\r\n          const provider = new ethers.BrowserProvider(window.ethereum);\r\n          setProvider(provider);\r\n          \r\n          // Get network\r\n          const network = await provider.getNetwork();\r\n          setChainId(network.chainId.toString());\r\n          \r\n          // Check if already connected\r\n          const accounts = await provider.listAccounts();\r\n          if (accounts.length > 0) {\r\n            setAccount(accounts[0].address);\r\n            setSigner(await provider.getSigner());\r\n            setConnected(true);\r\n          }\r\n        } catch (error) {\r\n          console.error('Error initializing provider:', error);\r\n        }\r\n      } else {\r\n        console.log('Please install MetaMask!');\r\n      }\r\n    };\r\n    \r\n    initProvider();\r\n  }, []);\r\n  \r\n  // Initialize contracts when provider and addresses are available\r\n  useEffect(() => {\r\n    const initContracts = async () => {\r\n      if (provider && contractAddresses.legalDocument && contractAddresses.daoFactory && contractAddresses.tokenReward) {\r\n        try {\r\n          const legalDocument = new ethers.Contract(\r\n            contractAddresses.legalDocument,\r\n            LegalDocumentABI.abi,\r\n            provider\r\n          );\r\n          \r\n          const daoFactory = new ethers.Contract(\r\n            contractAddresses.daoFactory,\r\n            DAOFactoryABI.abi,\r\n            provider\r\n          );\r\n          \r\n          const tokenReward = new ethers.Contract(\r\n            contractAddresses.tokenReward,\r\n            TokenRewardABI.abi,\r\n            provider\r\n          );\r\n          \r\n          setContracts({\r\n            legalDocument,\r\n            daoFactory,\r\n            tokenReward\r\n          });\r\n        } catch (error) {\r\n          console.error('Error initializing contracts:', error);\r\n        }\r\n      }\r\n    };\r\n    \r\n    initContracts();\r\n  }, [provider, contractAddresses.legalDocument, contractAddresses.daoFactory, contractAddresses.tokenReward]);\r\n  \r\n  // Listen for account changes\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      const handleAccountsChanged = async (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setAccount(accounts[0]);\r\n          setSigner(await provider.getSigner());\r\n          setConnected(true);\r\n          \r\n          // Update wallet address in backend if user is logged in\r\n          if (user) {\r\n            await updateWalletAddress(accounts[0]);\r\n          }\r\n        } else {\r\n          setAccount(null);\r\n          setSigner(null);\r\n          setConnected(false);\r\n        }\r\n      };\r\n      \r\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n      \r\n      return () => {\r\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n      };\r\n    }\r\n  }, [provider, user, updateWalletAddress]);\r\n  \r\n  // Listen for chain changes\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      const handleChainChanged = (chainId) => {\r\n        setChainId(chainId);\r\n        window.location.reload();\r\n      };\r\n      \r\n      window.ethereum.on('chainChanged', handleChainChanged);\r\n      \r\n      return () => {\r\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\r\n      };\r\n    }\r\n  }, []);\r\n  \r\n  // Connect to MetaMask\r\n  const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        // Request account access\r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        \r\n        // Check if on Mumbai Testnet\r\n        const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n        \r\n        if (chainId !== MUMBAI_CHAIN_ID) {\r\n          try {\r\n            // Switch to Mumbai Testnet\r\n            await window.ethereum.request({\r\n              method: 'wallet_switchEthereumChain',\r\n              params: [{ chainId: MUMBAI_CHAIN_ID }]\r\n            });\r\n          } catch (switchError) {\r\n            // If Mumbai Testnet is not added, add it\r\n            if (switchError.code === 4902) {\r\n              await window.ethereum.request({\r\n                method: 'wallet_addEthereumChain',\r\n                params: [{\r\n                  chainId: MUMBAI_CHAIN_ID,\r\n                  chainName: 'Polygon Mumbai Testnet',\r\n                  nativeCurrency: {\r\n                    name: 'MATIC',\r\n                    symbol: 'MATIC',\r\n                    decimals: 18\r\n                  },\r\n                  rpcUrls: ['https://rpc-mumbai.maticvigil.com'],\r\n                  blockExplorerUrls: ['https://mumbai.polygonscan.com']\r\n                }]\r\n              });\r\n            } else {\r\n              throw switchError;\r\n            }\r\n          }\r\n        }\r\n        \r\n        setAccount(accounts[0]);\r\n        setSigner(await provider.getSigner());\r\n        setConnected(true);\r\n        \r\n        // Update wallet address in backend if user is logged in\r\n        if (user) {\r\n          await updateWalletAddress(accounts[0]);\r\n        }\r\n        \r\n        return { success: true };\r\n      } catch (error) {\r\n        console.error('Error connecting to MetaMask:', error);\r\n        return { \r\n          success: false, \r\n          message: error.message || 'Failed to connect to MetaMask' \r\n        };\r\n      }\r\n    } else {\r\n      return { \r\n        success: false, \r\n        message: 'MetaMask is not installed' \r\n      };\r\n    }\r\n  };\r\n  \r\n  // Get contract with signer\r\n  const getContractWithSigner = (contractName) => {\r\n    if (!signer || !contracts[contractName]) {\r\n      return null;\r\n    }\r\n    \r\n    return contracts[contractName].connect(signer);\r\n  };\r\n  \r\n  return (\r\n    <Web3Context.Provider\r\n      value={{\r\n        provider,\r\n        signer,\r\n        account,\r\n        chainId,\r\n        connected,\r\n        contracts,\r\n        connectWallet,\r\n        getContractWithSigner\r\n      }}\r\n    >\r\n      {children}\r\n    </Web3Context.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}