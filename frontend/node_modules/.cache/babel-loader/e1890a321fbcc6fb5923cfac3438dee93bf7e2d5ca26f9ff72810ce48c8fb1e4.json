{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODES\\\\legal\\\\legal\\\\frontend\\\\src\\\\components\\\\ThreeDChart.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect } from 'react';\nimport * as THREE from 'three';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ThreeDChart = ({\n  data,\n  type = 'bar',\n  height = 300,\n  width = '100%',\n  className = ''\n}) => {\n  _s();\n  const mountRef = useRef(null);\n  useEffect(() => {\n    if (!mountRef.current) return;\n\n    // Scene setup\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0xf0f0f0);\n\n    // Camera setup\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\n    camera.position.set(5, 5, 5);\n\n    // Renderer setup\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true,\n      alpha: true\n    });\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    renderer.shadowMap.enabled = true;\n    mountRef.current.appendChild(renderer.domElement);\n\n    // Controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Lighting\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    directionalLight.position.set(5, 10, 7);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n\n    // Grid helper\n    const gridHelper = new THREE.GridHelper(10, 10);\n    scene.add(gridHelper);\n\n    // Create chart based on type\n    if (type === 'bar') {\n      createBarChart(scene, data);\n    } else if (type === 'pie') {\n      createPieChart(scene, data);\n    }\n\n    // Animation loop\n    const animate = () => {\n      requestAnimationFrame(animate);\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Handle window resize\n    const handleResize = () => {\n      if (!mountRef.current) return;\n      camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\n      camera.updateProjectionMatrix();\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\n    };\n    window.addEventListener('resize', handleResize);\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (mountRef.current) {\n        mountRef.current.removeChild(renderer.domElement);\n      }\n      scene.clear();\n    };\n  }, [data, type]);\n\n  // Function to create a 3D bar chart\n  const createBarChart = (scene, data) => {\n    const maxValue = Math.max(...data.map(item => item.value));\n    const barWidth = 0.5;\n    const spacing = 0.2;\n    const totalWidth = data.length * (barWidth + spacing) - spacing;\n    const startX = -totalWidth / 2 + barWidth / 2;\n\n    // Add bars\n    data.forEach((item, index) => {\n      const normalizedHeight = item.value / maxValue * 5; // Scale height\n      const geometry = new THREE.BoxGeometry(barWidth, normalizedHeight, barWidth);\n\n      // Generate color based on index\n      const hue = index / data.length * 360;\n      const color = new THREE.Color(`hsl(${hue}, 70%, 60%)`);\n      const material = new THREE.MeshPhongMaterial({\n        color: item.color || color,\n        transparent: true,\n        opacity: 0.8,\n        shininess: 100\n      });\n      const bar = new THREE.Mesh(geometry, material);\n      bar.position.x = startX + index * (barWidth + spacing);\n      bar.position.y = normalizedHeight / 2;\n      bar.castShadow = true;\n      bar.receiveShadow = true;\n      scene.add(bar);\n\n      // Add text label\n      const canvas = document.createElement('canvas');\n      const context = canvas.getContext('2d');\n      canvas.width = 128;\n      canvas.height = 64;\n      context.fillStyle = '#ffffff';\n      context.fillRect(0, 0, canvas.width, canvas.height);\n      context.font = '24px Arial';\n      context.fillStyle = '#000000';\n      context.textAlign = 'center';\n      context.fillText(item.label, canvas.width / 2, canvas.height / 2);\n      const texture = new THREE.CanvasTexture(canvas);\n      const labelMaterial = new THREE.MeshBasicMaterial({\n        map: texture,\n        transparent: true,\n        side: THREE.DoubleSide\n      });\n      const labelGeometry = new THREE.PlaneGeometry(1, 0.5);\n      const label = new THREE.Mesh(labelGeometry, labelMaterial);\n      label.position.set(bar.position.x, -0.5, bar.position.z + 0.5);\n      label.rotation.x = -Math.PI / 4;\n      scene.add(label);\n    });\n\n    // Add floor\n    const floorGeometry = new THREE.PlaneGeometry(10, 10);\n    const floorMaterial = new THREE.MeshPhongMaterial({\n      color: 0xcccccc,\n      side: THREE.DoubleSide,\n      transparent: true,\n      opacity: 0.5\n    });\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial);\n    floor.rotation.x = Math.PI / 2;\n    floor.position.y = -0.01;\n    floor.receiveShadow = true;\n    scene.add(floor);\n  };\n\n  // Function to create a 3D pie chart\n  const createPieChart = (scene, data) => {\n    const radius = 2;\n    const height = 0.5;\n    const totalValue = data.reduce((sum, item) => sum + item.value, 0);\n    let startAngle = 0;\n\n    // Add pie segments\n    data.forEach((item, index) => {\n      const angle = item.value / totalValue * Math.PI * 2;\n      const endAngle = startAngle + angle;\n      const shape = new THREE.Shape();\n      shape.moveTo(0, 0);\n      shape.lineTo(radius * Math.cos(startAngle), radius * Math.sin(startAngle));\n      const curve = new THREE.EllipseCurve(0, 0, radius, radius, startAngle, endAngle, false, 0);\n      const curvePoints = curve.getPoints(32);\n      curvePoints.forEach(point => {\n        shape.lineTo(point.x, point.y);\n      });\n      shape.lineTo(0, 0);\n      const extrudeSettings = {\n        steps: 1,\n        depth: height,\n        bevelEnabled: false\n      };\n      const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\n\n      // Generate color based on index\n      const hue = index / data.length * 360;\n      const color = new THREE.Color(`hsl(${hue}, 70%, 60%)`);\n      const material = new THREE.MeshPhongMaterial({\n        color: item.color || color,\n        transparent: true,\n        opacity: 0.8,\n        shininess: 100\n      });\n      const segment = new THREE.Mesh(geometry, material);\n      segment.castShadow = true;\n      segment.receiveShadow = true;\n\n      // Slightly separate segments for visual effect\n      const midAngle = startAngle + angle / 2;\n      segment.position.x = Math.cos(midAngle) * 0.05;\n      segment.position.z = Math.sin(midAngle) * 0.05;\n      scene.add(segment);\n      startAngle = endAngle;\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: mountRef,\n    style: {\n      height: height,\n      width: width\n    },\n    className: `rounded-lg overflow-hidden ${className}`\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 219,\n    columnNumber: 5\n  }, this);\n};\n_s(ThreeDChart, \"V9/qkEdV8GfsDZk7lMTA1T8g5Ps=\");\n_c = ThreeDChart;\nexport default ThreeDChart;\nvar _c;\n$RefreshReg$(_c, \"ThreeDChart\");","map":{"version":3,"names":["React","useRef","useEffect","THREE","OrbitControls","jsxDEV","_jsxDEV","ThreeDChart","data","type","height","width","className","_s","mountRef","current","scene","Scene","background","Color","camera","PerspectiveCamera","clientWidth","clientHeight","position","set","renderer","WebGLRenderer","antialias","alpha","setSize","shadowMap","enabled","appendChild","domElement","controls","enableDamping","dampingFactor","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","castShadow","gridHelper","GridHelper","createBarChart","createPieChart","animate","requestAnimationFrame","update","render","handleResize","aspect","updateProjectionMatrix","window","addEventListener","removeEventListener","removeChild","clear","maxValue","Math","max","map","item","value","barWidth","spacing","totalWidth","length","startX","forEach","index","normalizedHeight","geometry","BoxGeometry","hue","color","material","MeshPhongMaterial","transparent","opacity","shininess","bar","Mesh","x","y","receiveShadow","canvas","document","createElement","context","getContext","fillStyle","fillRect","font","textAlign","fillText","label","texture","CanvasTexture","labelMaterial","MeshBasicMaterial","side","DoubleSide","labelGeometry","PlaneGeometry","z","rotation","PI","floorGeometry","floorMaterial","floor","radius","totalValue","reduce","sum","startAngle","angle","endAngle","shape","Shape","moveTo","lineTo","cos","sin","curve","EllipseCurve","curvePoints","getPoints","point","extrudeSettings","steps","depth","bevelEnabled","ExtrudeGeometry","segment","midAngle","ref","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/CODES/legal/legal/frontend/src/components/ThreeDChart.js"],"sourcesContent":["import React, { useRef, useEffect } from 'react';\r\nimport * as THREE from 'three';\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\r\n\r\nconst ThreeDChart = ({ data, type = 'bar', height = 300, width = '100%', className = '' }) => {\r\n  const mountRef = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    if (!mountRef.current) return;\r\n    \r\n    // Scene setup\r\n    const scene = new THREE.Scene();\r\n    scene.background = new THREE.Color(0xf0f0f0);\r\n    \r\n    // Camera setup\r\n    const camera = new THREE.PerspectiveCamera(75, mountRef.current.clientWidth / mountRef.current.clientHeight, 0.1, 1000);\r\n    camera.position.set(5, 5, 5);\r\n    \r\n    // Renderer setup\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true });\r\n    renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\r\n    renderer.shadowMap.enabled = true;\r\n    mountRef.current.appendChild(renderer.domElement);\r\n    \r\n    // Controls\r\n    const controls = new OrbitControls(camera, renderer.domElement);\r\n    controls.enableDamping = true;\r\n    controls.dampingFactor = 0.05;\r\n    \r\n    // Lighting\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\r\n    scene.add(ambientLight);\r\n    \r\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 0.8);\r\n    directionalLight.position.set(5, 10, 7);\r\n    directionalLight.castShadow = true;\r\n    scene.add(directionalLight);\r\n    \r\n    // Grid helper\r\n    const gridHelper = new THREE.GridHelper(10, 10);\r\n    scene.add(gridHelper);\r\n    \r\n    // Create chart based on type\r\n    if (type === 'bar') {\r\n      createBarChart(scene, data);\r\n    } else if (type === 'pie') {\r\n      createPieChart(scene, data);\r\n    }\r\n    \r\n    // Animation loop\r\n    const animate = () => {\r\n      requestAnimationFrame(animate);\r\n      controls.update();\r\n      renderer.render(scene, camera);\r\n    };\r\n    \r\n    animate();\r\n    \r\n    // Handle window resize\r\n    const handleResize = () => {\r\n      if (!mountRef.current) return;\r\n      \r\n      camera.aspect = mountRef.current.clientWidth / mountRef.current.clientHeight;\r\n      camera.updateProjectionMatrix();\r\n      renderer.setSize(mountRef.current.clientWidth, mountRef.current.clientHeight);\r\n    };\r\n    \r\n    window.addEventListener('resize', handleResize);\r\n    \r\n    // Cleanup\r\n    return () => {\r\n      window.removeEventListener('resize', handleResize);\r\n      if (mountRef.current) {\r\n        mountRef.current.removeChild(renderer.domElement);\r\n      }\r\n      scene.clear();\r\n    };\r\n  }, [data, type]);\r\n  \r\n  // Function to create a 3D bar chart\r\n  const createBarChart = (scene, data) => {\r\n    const maxValue = Math.max(...data.map(item => item.value));\r\n    const barWidth = 0.5;\r\n    const spacing = 0.2;\r\n    const totalWidth = data.length * (barWidth + spacing) - spacing;\r\n    const startX = -totalWidth / 2 + barWidth / 2;\r\n    \r\n    // Add bars\r\n    data.forEach((item, index) => {\r\n      const normalizedHeight = (item.value / maxValue) * 5; // Scale height\r\n      const geometry = new THREE.BoxGeometry(barWidth, normalizedHeight, barWidth);\r\n      \r\n      // Generate color based on index\r\n      const hue = (index / data.length) * 360;\r\n      const color = new THREE.Color(`hsl(${hue}, 70%, 60%)`);\r\n      \r\n      const material = new THREE.MeshPhongMaterial({ \r\n        color: item.color || color,\r\n        transparent: true,\r\n        opacity: 0.8,\r\n        shininess: 100\r\n      });\r\n      \r\n      const bar = new THREE.Mesh(geometry, material);\r\n      bar.position.x = startX + index * (barWidth + spacing);\r\n      bar.position.y = normalizedHeight / 2;\r\n      bar.castShadow = true;\r\n      bar.receiveShadow = true;\r\n      \r\n      scene.add(bar);\r\n      \r\n      // Add text label\r\n      const canvas = document.createElement('canvas');\r\n      const context = canvas.getContext('2d');\r\n      canvas.width = 128;\r\n      canvas.height = 64;\r\n      context.fillStyle = '#ffffff';\r\n      context.fillRect(0, 0, canvas.width, canvas.height);\r\n      context.font = '24px Arial';\r\n      context.fillStyle = '#000000';\r\n      context.textAlign = 'center';\r\n      context.fillText(item.label, canvas.width / 2, canvas.height / 2);\r\n      \r\n      const texture = new THREE.CanvasTexture(canvas);\r\n      const labelMaterial = new THREE.MeshBasicMaterial({\r\n        map: texture,\r\n        transparent: true,\r\n        side: THREE.DoubleSide\r\n      });\r\n      \r\n      const labelGeometry = new THREE.PlaneGeometry(1, 0.5);\r\n      const label = new THREE.Mesh(labelGeometry, labelMaterial);\r\n      label.position.set(bar.position.x, -0.5, bar.position.z + 0.5);\r\n      label.rotation.x = -Math.PI / 4;\r\n      scene.add(label);\r\n    });\r\n    \r\n    // Add floor\r\n    const floorGeometry = new THREE.PlaneGeometry(10, 10);\r\n    const floorMaterial = new THREE.MeshPhongMaterial({ \r\n      color: 0xcccccc,\r\n      side: THREE.DoubleSide,\r\n      transparent: true,\r\n      opacity: 0.5\r\n    });\r\n    \r\n    const floor = new THREE.Mesh(floorGeometry, floorMaterial);\r\n    floor.rotation.x = Math.PI / 2;\r\n    floor.position.y = -0.01;\r\n    floor.receiveShadow = true;\r\n    scene.add(floor);\r\n  };\r\n  \r\n  // Function to create a 3D pie chart\r\n  const createPieChart = (scene, data) => {\r\n    const radius = 2;\r\n    const height = 0.5;\r\n    const totalValue = data.reduce((sum, item) => sum + item.value, 0);\r\n    let startAngle = 0;\r\n    \r\n    // Add pie segments\r\n    data.forEach((item, index) => {\r\n      const angle = (item.value / totalValue) * Math.PI * 2;\r\n      const endAngle = startAngle + angle;\r\n      \r\n      const shape = new THREE.Shape();\r\n      shape.moveTo(0, 0);\r\n      shape.lineTo(radius * Math.cos(startAngle), radius * Math.sin(startAngle));\r\n      \r\n      const curve = new THREE.EllipseCurve(\r\n        0, 0,\r\n        radius, radius,\r\n        startAngle, endAngle,\r\n        false, 0\r\n      );\r\n      \r\n      const curvePoints = curve.getPoints(32);\r\n      curvePoints.forEach(point => {\r\n        shape.lineTo(point.x, point.y);\r\n      });\r\n      \r\n      shape.lineTo(0, 0);\r\n      \r\n      const extrudeSettings = {\r\n        steps: 1,\r\n        depth: height,\r\n        bevelEnabled: false\r\n      };\r\n      \r\n      const geometry = new THREE.ExtrudeGeometry(shape, extrudeSettings);\r\n      \r\n      // Generate color based on index\r\n      const hue = (index / data.length) * 360;\r\n      const color = new THREE.Color(`hsl(${hue}, 70%, 60%)`);\r\n      \r\n      const material = new THREE.MeshPhongMaterial({ \r\n        color: item.color || color,\r\n        transparent: true,\r\n        opacity: 0.8,\r\n        shininess: 100\r\n      });\r\n      \r\n      const segment = new THREE.Mesh(geometry, material);\r\n      segment.castShadow = true;\r\n      segment.receiveShadow = true;\r\n      \r\n      // Slightly separate segments for visual effect\r\n      const midAngle = startAngle + angle / 2;\r\n      segment.position.x = Math.cos(midAngle) * 0.05;\r\n      segment.position.z = Math.sin(midAngle) * 0.05;\r\n      \r\n      scene.add(segment);\r\n      \r\n      startAngle = endAngle;\r\n    });\r\n  };\r\n  \r\n  return (\r\n    <div \r\n      ref={mountRef} \r\n      style={{ height: height, width: width }} \r\n      className={`rounded-lg overflow-hidden ${className}`}\r\n    />\r\n  );\r\n};\r\n\r\nexport default ThreeDChart; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}