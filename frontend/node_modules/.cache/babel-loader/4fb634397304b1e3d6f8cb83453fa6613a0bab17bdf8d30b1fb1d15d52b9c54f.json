{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\nconsole.log('API URL:', API_URL); // Debug log\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(config => {\n  console.log('API Request:', {\n    url: config.url,\n    method: config.method,\n    data: config.data\n  });\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for logging\napi.interceptors.response.use(response => {\n  console.log('API Response:', {\n    url: response.config.url,\n    status: response.status,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$config, _error$response, _error$response2;\n  console.error('API Response Error:', {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n    message: error.message\n  });\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  logout: () => api.post('/auth/logout'),\n  getMe: () => api.get('/auth/me'),\n  updateWallet: walletAddress => api.put('/auth/wallet', {\n    walletAddress\n  })\n};\n\n// Document API\nexport const documentAPI = {\n  createDocument: documentData => api.post('/documents', documentData),\n  getUserDocuments: () => api.get('/documents/user'),\n  getDocument: id => api.get(`/documents/${id}`),\n  updateDocument: (id, documentData) => api.put(`/documents/${id}`, documentData),\n  updateDocumentBlockchain: (id, blockchainData) => api.put(`/documents/${id}/blockchain`, blockchainData),\n  deleteDocument: id => api.delete(`/documents/${id}`)\n};\n\n// DAO API\nexport const daoAPI = {\n  createDAO: daoData => api.post('/daos', daoData),\n  getUserDAOs: () => api.get('/daos/user/me'),\n  getDAO: id => api.get(`/daos/${id}`),\n  updateDAO: (id, daoData) => api.put(`/daos/${id}`, daoData),\n  updateDAOBlockchain: (id, blockchainData) => api.put(`/daos/${id}/blockchain`, blockchainData),\n  deleteDAO: id => api.delete(`/daos/${id}`)\n};\n\n// AI API\nexport const aiAPI = {\n  generateDocument: async (documentType, parameters) => {\n    try {\n      console.log('Sending document generation request:', {\n        documentType,\n        parameters\n      });\n      const response = await api.post('/ai/generate-document', {\n        documentType,\n        parameters\n      });\n      console.log('Document generation response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in document generation API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  reviewContract: async contractText => {\n    try {\n      console.log('Sending contract review request, text length:', contractText.length);\n      const response = await api.post('/ai/review-contract', {\n        contractText\n      });\n      console.log('Contract review response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in contract review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  reviewContractImage: async base64Image => {\n    try {\n      console.log('Sending contract image review request');\n\n      // Ensure the base64 string is properly formatted\n      const imageData = base64Image.includes('base64,') ? base64Image : `data:image/jpeg;base64,${base64Image}`;\n      const response = await api.post('/ai/review-contract-image', {\n        image: imageData\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'maxContentLength': Infinity,\n          'maxBodyLength': Infinity\n        },\n        timeout: 60000 // Increase timeout to 60 seconds for image processing\n      });\n      console.log('Contract image review response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in contract image review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  chat: async (message, conversation) => {\n    try {\n      console.log('Sending chat request:', {\n        message,\n        conversationLength: conversation.length\n      });\n\n      // Ensure conversation is properly formatted\n      const formattedConversation = conversation.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n      const response = await api.post('/ai/chat', {\n        message,\n        conversation: formattedConversation\n      });\n      console.log('Chat response received:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in chat API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","api","create","baseURL","withCredentials","headers","interceptors","request","use","config","url","method","data","error","Promise","reject","response","status","_error$config","_error$response","_error$response2","message","authAPI","register","userData","post","login","credentials","logout","getMe","get","updateWallet","walletAddress","put","documentAPI","createDocument","documentData","getUserDocuments","getDocument","id","updateDocument","updateDocumentBlockchain","blockchainData","deleteDocument","delete","daoAPI","createDAO","daoData","getUserDAOs","getDAO","updateDAO","updateDAOBlockchain","deleteDAO","aiAPI","generateDocument","documentType","parameters","Error","reviewContract","contractText","length","reviewContractImage","base64Image","imageData","includes","image","Infinity","timeout","chat","conversation","conversationLength","formattedConversation","map","msg","role","content"],"sources":["D:/CODES/legal/legal/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconsole.log('API URL:', API_URL); // Debug log\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log('API Request:', {\n      url: config.url,\n      method: config.method,\n      data: config.data\n    });\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for logging\napi.interceptors.response.use(\n  (response) => {\n    console.log('API Response:', {\n      url: response.config.url,\n      status: response.status,\n      data: response.data\n    });\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', {\n      url: error.config?.url,\n      status: error.response?.status,\n      data: error.response?.data,\n      message: error.message\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  logout: () => api.post('/auth/logout'),\n  getMe: () => api.get('/auth/me'),\n  updateWallet: (walletAddress) => api.put('/auth/wallet', { walletAddress })\n};\n\n// Document API\nexport const documentAPI = {\n  createDocument: (documentData) => api.post('/documents', documentData),\n  getUserDocuments: () => api.get('/documents/user'),\n  getDocument: (id) => api.get(`/documents/${id}`),\n  updateDocument: (id, documentData) => api.put(`/documents/${id}`, documentData),\n  updateDocumentBlockchain: (id, blockchainData) => api.put(`/documents/${id}/blockchain`, blockchainData),\n  deleteDocument: (id) => api.delete(`/documents/${id}`)\n};\n\n// DAO API\nexport const daoAPI = {\n  createDAO: (daoData) => api.post('/daos', daoData),\n  getUserDAOs: () => api.get('/daos/user/me'),\n  getDAO: (id) => api.get(`/daos/${id}`),\n  updateDAO: (id, daoData) => api.put(`/daos/${id}`, daoData),\n  updateDAOBlockchain: (id, blockchainData) => api.put(`/daos/${id}/blockchain`, blockchainData),\n  deleteDAO: (id) => api.delete(`/daos/${id}`)\n};\n\n// AI API\nexport const aiAPI = {\n  generateDocument: async (documentType, parameters) => {\n    try {\n      console.log('Sending document generation request:', { documentType, parameters });\n      \n      const response = await api.post('/ai/generate-document', { \n        documentType, \n        parameters \n      });\n      \n      console.log('Document generation response:', response);\n      \n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in document generation API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  reviewContract: async (contractText) => {\n    try {\n      console.log('Sending contract review request, text length:', contractText.length);\n      \n      const response = await api.post('/ai/review-contract', { \n        contractText \n      });\n      \n      console.log('Contract review response:', response);\n      \n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in contract review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  reviewContractImage: async (base64Image) => {\n    try {\n      console.log('Sending contract image review request');\n      \n      // Ensure the base64 string is properly formatted\n      const imageData = base64Image.includes('base64,') ? base64Image : `data:image/jpeg;base64,${base64Image}`;\n      \n      const response = await api.post('/ai/review-contract-image', { \n        image: imageData \n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'maxContentLength': Infinity,\n          'maxBodyLength': Infinity\n        },\n        timeout: 60000 // Increase timeout to 60 seconds for image processing\n      });\n      \n      console.log('Contract image review response:', response);\n      \n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in contract image review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  chat: async (message, conversation) => {\n    try {\n      console.log('Sending chat request:', { message, conversationLength: conversation.length });\n      \n      // Ensure conversation is properly formatted\n      const formattedConversation = conversation.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      }));\n      \n      const response = await api.post('/ai/chat', { \n        message, \n        conversation: formattedConversation \n      });\n      \n      console.log('Chat response received:', response);\n      \n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in chat API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  }\n};\n\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}