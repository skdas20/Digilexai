{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODES\\\\legal\\\\legal\\\\frontend\\\\src\\\\contexts\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\nexport const useWeb3 = () => {\n  _s();\n  return useContext(Web3Context);\n};\n_s(useWeb3, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const Web3Provider = ({\n  children\n}) => {\n  _s2();\n  const [connected, setConnected] = useState(false);\n  const [account, setAccount] = useState('');\n  const [chainId, setChainId] = useState(null);\n  const [balance, setBalance] = useState('0');\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  // Check if wallet is already connected on component mount\n  useEffect(() => {\n    const checkConnection = async () => {\n      if (window.ethereum) {\n        try {\n          // Check if already connected\n          const accounts = await window.ethereum.request({\n            method: 'eth_accounts'\n          });\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n            setConnected(true);\n\n            // Get chain ID\n            const chainId = await window.ethereum.request({\n              method: 'eth_chainId'\n            });\n            setChainId(parseInt(chainId, 16));\n\n            // Get balance\n            const balance = await window.ethereum.request({\n              method: 'eth_getBalance',\n              params: [accounts[0], 'latest']\n            });\n            setBalance(parseInt(balance, 16) / 1e18); // Convert from wei to ETH\n          }\n        } catch (err) {\n          console.error('Error checking wallet connection:', err);\n        }\n      }\n    };\n    checkConnection();\n  }, []);\n\n  // Listen for account changes\n  useEffect(() => {\n    if (window.ethereum) {\n      const handleAccountsChanged = accounts => {\n        if (accounts.length === 0) {\n          // User disconnected\n          setConnected(false);\n          setAccount('');\n          setBalance('0');\n        } else {\n          // Account changed\n          setAccount(accounts[0]);\n          setConnected(true);\n\n          // Update balance\n          window.ethereum.request({\n            method: 'eth_getBalance',\n            params: [accounts[0], 'latest']\n          }).then(balance => {\n            setBalance(parseInt(balance, 16) / 1e18);\n          });\n        }\n      };\n      const handleChainChanged = chainId => {\n        setChainId(parseInt(chainId, 16));\n      };\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\n      window.ethereum.on('chainChanged', handleChainChanged);\n      return () => {\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\n      };\n    }\n  }, []);\n\n  // Connect wallet\n  const connectWallet = async walletType => {\n    setLoading(true);\n    setError('');\n    try {\n      if (walletType === 'metamask') {\n        if (!window.ethereum) {\n          throw new Error('MetaMask is not installed. Please install MetaMask to connect.');\n        }\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        setAccount(accounts[0]);\n        setConnected(true);\n\n        // Get chain ID\n        const chainId = await window.ethereum.request({\n          method: 'eth_chainId'\n        });\n        setChainId(parseInt(chainId, 16));\n\n        // Get balance\n        const balance = await window.ethereum.request({\n          method: 'eth_getBalance',\n          params: [accounts[0], 'latest']\n        });\n        setBalance(parseInt(balance, 16) / 1e18);\n        return accounts[0];\n      } else {\n        // For demo purposes, simulate connection for other wallet types\n        await new Promise(resolve => setTimeout(resolve, 1000));\n        const mockAccount = '0x' + Array(40).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\n        setAccount(mockAccount);\n        setConnected(true);\n        setChainId(1); // Ethereum Mainnet\n        setBalance(Math.random() * 10); // Random balance\n\n        return mockAccount;\n      }\n    } catch (err) {\n      console.error('Error connecting wallet:', err);\n      setError(err.message || 'Failed to connect wallet');\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = async () => {\n    setConnected(false);\n    setAccount('');\n    setBalance('0');\n    setChainId(null);\n  };\n\n  // Switch network\n  const switchNetwork = async targetChainId => {\n    if (!window.ethereum) {\n      throw new Error('No Ethereum provider found');\n    }\n    try {\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: `0x${targetChainId.toString(16)}`\n        }]\n      });\n    } catch (err) {\n      // If the chain is not added to MetaMask\n      if (err.code === 4902) {\n        // Add the network (simplified, would need more parameters in a real app)\n        await window.ethereum.request({\n          method: 'wallet_addEthereumChain',\n          params: [{\n            chainId: `0x${targetChainId.toString(16)}`,\n            chainName: 'Custom Network',\n            nativeCurrency: {\n              name: 'ETH',\n              symbol: 'ETH',\n              decimals: 18\n            },\n            rpcUrls: ['https://rpc-url.example'],\n            blockExplorerUrls: ['https://explorer.example']\n          }]\n        });\n      } else {\n        throw err;\n      }\n    }\n  };\n\n  // Format address for display\n  const formatAddress = address => {\n    if (!address) return '';\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n  };\n  const value = {\n    connected,\n    account,\n    chainId,\n    balance,\n    loading,\n    error,\n    connectWallet,\n    disconnectWallet,\n    switchNetwork,\n    formatAddress\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 197,\n    columnNumber: 5\n  }, this);\n};\n_s2(Web3Provider, \"bgzIVYR2sQoPEgN0onbCgpcBoXU=\");\n_c = Web3Provider;\nexport default Web3Context;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","Web3Context","useWeb3","_s","Web3Provider","children","_s2","connected","setConnected","account","setAccount","chainId","setChainId","balance","setBalance","loading","setLoading","error","setError","checkConnection","window","ethereum","accounts","request","method","length","parseInt","params","err","console","handleAccountsChanged","then","handleChainChanged","on","removeListener","connectWallet","walletType","Error","Promise","resolve","setTimeout","mockAccount","Array","fill","map","Math","floor","random","toString","join","message","disconnectWallet","switchNetwork","targetChainId","code","chainName","nativeCurrency","name","symbol","decimals","rpcUrls","blockExplorerUrls","formatAddress","address","substring","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/CODES/legal/legal/frontend/src/contexts/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst Web3Context = createContext();\r\n\r\nexport const useWeb3 = () => useContext(Web3Context);\r\n\r\nexport const Web3Provider = ({ children }) => {\r\n  const [connected, setConnected] = useState(false);\r\n  const [account, setAccount] = useState('');\r\n  const [chainId, setChainId] = useState(null);\r\n  const [balance, setBalance] = useState('0');\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState('');\r\n  \r\n  // Check if wallet is already connected on component mount\r\n  useEffect(() => {\r\n    const checkConnection = async () => {\r\n      if (window.ethereum) {\r\n        try {\r\n          // Check if already connected\r\n          const accounts = await window.ethereum.request({ method: 'eth_accounts' });\r\n          if (accounts.length > 0) {\r\n            setAccount(accounts[0]);\r\n            setConnected(true);\r\n            \r\n            // Get chain ID\r\n            const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n            setChainId(parseInt(chainId, 16));\r\n            \r\n            // Get balance\r\n            const balance = await window.ethereum.request({\r\n              method: 'eth_getBalance',\r\n              params: [accounts[0], 'latest']\r\n            });\r\n            setBalance(parseInt(balance, 16) / 1e18); // Convert from wei to ETH\r\n          }\r\n        } catch (err) {\r\n          console.error('Error checking wallet connection:', err);\r\n        }\r\n      }\r\n    };\r\n    \r\n    checkConnection();\r\n  }, []);\r\n  \r\n  // Listen for account changes\r\n  useEffect(() => {\r\n    if (window.ethereum) {\r\n      const handleAccountsChanged = (accounts) => {\r\n        if (accounts.length === 0) {\r\n          // User disconnected\r\n          setConnected(false);\r\n          setAccount('');\r\n          setBalance('0');\r\n        } else {\r\n          // Account changed\r\n          setAccount(accounts[0]);\r\n          setConnected(true);\r\n          \r\n          // Update balance\r\n          window.ethereum.request({\r\n            method: 'eth_getBalance',\r\n            params: [accounts[0], 'latest']\r\n          }).then(balance => {\r\n            setBalance(parseInt(balance, 16) / 1e18);\r\n          });\r\n        }\r\n      };\r\n      \r\n      const handleChainChanged = (chainId) => {\r\n        setChainId(parseInt(chainId, 16));\r\n      };\r\n      \r\n      window.ethereum.on('accountsChanged', handleAccountsChanged);\r\n      window.ethereum.on('chainChanged', handleChainChanged);\r\n      \r\n      return () => {\r\n        window.ethereum.removeListener('accountsChanged', handleAccountsChanged);\r\n        window.ethereum.removeListener('chainChanged', handleChainChanged);\r\n      };\r\n    }\r\n  }, []);\r\n  \r\n  // Connect wallet\r\n  const connectWallet = async (walletType) => {\r\n    setLoading(true);\r\n    setError('');\r\n    \r\n    try {\r\n      if (walletType === 'metamask') {\r\n        if (!window.ethereum) {\r\n          throw new Error('MetaMask is not installed. Please install MetaMask to connect.');\r\n        }\r\n        \r\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n        setAccount(accounts[0]);\r\n        setConnected(true);\r\n        \r\n        // Get chain ID\r\n        const chainId = await window.ethereum.request({ method: 'eth_chainId' });\r\n        setChainId(parseInt(chainId, 16));\r\n        \r\n        // Get balance\r\n        const balance = await window.ethereum.request({\r\n          method: 'eth_getBalance',\r\n          params: [accounts[0], 'latest']\r\n        });\r\n        setBalance(parseInt(balance, 16) / 1e18);\r\n        \r\n        return accounts[0];\r\n      } else {\r\n        // For demo purposes, simulate connection for other wallet types\r\n        await new Promise(resolve => setTimeout(resolve, 1000));\r\n        \r\n        const mockAccount = '0x' + Array(40).fill(0).map(() => Math.floor(Math.random() * 16).toString(16)).join('');\r\n        setAccount(mockAccount);\r\n        setConnected(true);\r\n        setChainId(1); // Ethereum Mainnet\r\n        setBalance(Math.random() * 10); // Random balance\r\n        \r\n        return mockAccount;\r\n      }\r\n    } catch (err) {\r\n      console.error('Error connecting wallet:', err);\r\n      setError(err.message || 'Failed to connect wallet');\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Disconnect wallet\r\n  const disconnectWallet = async () => {\r\n    setConnected(false);\r\n    setAccount('');\r\n    setBalance('0');\r\n    setChainId(null);\r\n  };\r\n  \r\n  // Switch network\r\n  const switchNetwork = async (targetChainId) => {\r\n    if (!window.ethereum) {\r\n      throw new Error('No Ethereum provider found');\r\n    }\r\n    \r\n    try {\r\n      await window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: `0x${targetChainId.toString(16)}` }]\r\n      });\r\n    } catch (err) {\r\n      // If the chain is not added to MetaMask\r\n      if (err.code === 4902) {\r\n        // Add the network (simplified, would need more parameters in a real app)\r\n        await window.ethereum.request({\r\n          method: 'wallet_addEthereumChain',\r\n          params: [\r\n            {\r\n              chainId: `0x${targetChainId.toString(16)}`,\r\n              chainName: 'Custom Network',\r\n              nativeCurrency: {\r\n                name: 'ETH',\r\n                symbol: 'ETH',\r\n                decimals: 18\r\n              },\r\n              rpcUrls: ['https://rpc-url.example'],\r\n              blockExplorerUrls: ['https://explorer.example']\r\n            }\r\n          ]\r\n        });\r\n      } else {\r\n        throw err;\r\n      }\r\n    }\r\n  };\r\n  \r\n  // Format address for display\r\n  const formatAddress = (address) => {\r\n    if (!address) return '';\r\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\r\n  };\r\n  \r\n  const value = {\r\n    connected,\r\n    account,\r\n    chainId,\r\n    balance,\r\n    loading,\r\n    error,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    switchNetwork,\r\n    formatAddress\r\n  };\r\n  \r\n  return (\r\n    <Web3Context.Provider value={value}>\r\n      {children}\r\n    </Web3Context.Provider>\r\n  );\r\n};\r\n\r\nexport default Web3Context; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}