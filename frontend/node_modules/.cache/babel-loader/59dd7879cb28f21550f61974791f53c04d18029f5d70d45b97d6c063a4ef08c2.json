{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\piyus\\\\Downloads\\\\legal\\\\frontend\\\\src\\\\contexts\\\\Web3Context.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport Web3 from 'web3';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Web3Context = /*#__PURE__*/createContext();\n\n// Provider component\nexport const Web3Provider = ({\n  children\n}) => {\n  _s();\n  const [web3, setWeb3] = useState(null);\n  const [account, setAccount] = useState(null);\n  const [networkId, setNetworkId] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Initialize web3\n  useEffect(() => {\n    const initWeb3 = async () => {\n      try {\n        // Check if MetaMask is installed\n        if (window.ethereum) {\n          const web3Instance = new Web3(window.ethereum);\n          setWeb3(web3Instance);\n\n          // Get network ID\n          const networkId = await web3Instance.eth.net.getId();\n          setNetworkId(networkId);\n\n          // Check if already connected\n          const accounts = await web3Instance.eth.getAccounts();\n          if (accounts.length > 0) {\n            setAccount(accounts[0]);\n          }\n\n          // Listen for account changes\n          window.ethereum.on('accountsChanged', accounts => {\n            setAccount(accounts[0] || null);\n          });\n\n          // Listen for network changes\n          window.ethereum.on('chainChanged', () => {\n            window.location.reload();\n          });\n        } else {\n          setError('Please install MetaMask to use this application');\n        }\n      } catch (error) {\n        console.error('Error initializing web3:', error);\n        setError('Failed to initialize web3');\n      } finally {\n        setLoading(false);\n      }\n    };\n    initWeb3();\n\n    // Cleanup listeners\n    return () => {\n      if (window.ethereum) {\n        window.ethereum.removeAllListeners('accountsChanged');\n        window.ethereum.removeAllListeners('chainChanged');\n      }\n    };\n  }, []);\n\n  // Connect wallet\n  const connectWallet = async () => {\n    if (!web3) {\n      setError('Web3 not initialized');\n      return false;\n    }\n    try {\n      setLoading(true);\n\n      // Request account access\n      const accounts = await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      setAccount(accounts[0]);\n      return true;\n    } catch (error) {\n      console.error('Error connecting wallet:', error);\n      setError('Failed to connect wallet');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Disconnect wallet\n  const disconnectWallet = () => {\n    setAccount(null);\n  };\n\n  // Get short address\n  const getShortAddress = address => {\n    if (!address) return '';\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\n  };\n\n  // Check if connected to the correct network\n  const isCorrectNetwork = () => {\n    // Replace with your desired network ID (e.g., 1 for Ethereum Mainnet, 5 for Goerli)\n    const desiredNetworkId = process.env.REACT_APP_NETWORK_ID || '1';\n    return networkId && networkId.toString() === desiredNetworkId;\n  };\n\n  // Switch network\n  const switchNetwork = async () => {\n    if (!web3) {\n      setError('Web3 not initialized');\n      return false;\n    }\n    try {\n      // Replace with your desired network parameters\n      const desiredNetworkId = process.env.REACT_APP_NETWORK_ID || '1';\n      const desiredNetworkHex = `0x${parseInt(desiredNetworkId).toString(16)}`;\n      await window.ethereum.request({\n        method: 'wallet_switchEthereumChain',\n        params: [{\n          chainId: desiredNetworkHex\n        }]\n      });\n      return true;\n    } catch (error) {\n      console.error('Error switching network:', error);\n      setError('Failed to switch network');\n      return false;\n    }\n  };\n\n  // Context value\n  const value = {\n    web3,\n    account,\n    networkId,\n    loading,\n    error,\n    connectWallet,\n    disconnectWallet,\n    getShortAddress,\n    isCorrectNetwork,\n    switchNetwork\n  };\n  return /*#__PURE__*/_jsxDEV(Web3Context.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 147,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the web3 context\n_s(Web3Provider, \"5n1t9NbJSdjPIOpKyJHLB0enoy0=\");\n_c = Web3Provider;\nexport const useWeb3 = () => {\n  _s2();\n  const context = useContext(Web3Context);\n  if (!context) {\n    throw new Error('useWeb3 must be used within a Web3Provider');\n  }\n  return context;\n};\n_s2(useWeb3, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default Web3Context;\nvar _c;\n$RefreshReg$(_c, \"Web3Provider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","Web3","jsxDEV","_jsxDEV","Web3Context","Web3Provider","children","_s","web3","setWeb3","account","setAccount","networkId","setNetworkId","loading","setLoading","error","setError","initWeb3","window","ethereum","web3Instance","eth","net","getId","accounts","getAccounts","length","on","location","reload","console","removeAllListeners","connectWallet","request","method","disconnectWallet","getShortAddress","address","substring","isCorrectNetwork","desiredNetworkId","process","env","REACT_APP_NETWORK_ID","toString","switchNetwork","desiredNetworkHex","parseInt","params","chainId","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWeb3","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/piyus/Downloads/legal/frontend/src/contexts/Web3Context.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport Web3 from 'web3';\r\n\r\n// Create context\r\nconst Web3Context = createContext();\r\n\r\n// Provider component\r\nexport const Web3Provider = ({ children }) => {\r\n  const [web3, setWeb3] = useState(null);\r\n  const [account, setAccount] = useState(null);\r\n  const [networkId, setNetworkId] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Initialize web3\r\n  useEffect(() => {\r\n    const initWeb3 = async () => {\r\n      try {\r\n        // Check if MetaMask is installed\r\n        if (window.ethereum) {\r\n          const web3Instance = new Web3(window.ethereum);\r\n          setWeb3(web3Instance);\r\n          \r\n          // Get network ID\r\n          const networkId = await web3Instance.eth.net.getId();\r\n          setNetworkId(networkId);\r\n          \r\n          // Check if already connected\r\n          const accounts = await web3Instance.eth.getAccounts();\r\n          if (accounts.length > 0) {\r\n            setAccount(accounts[0]);\r\n          }\r\n          \r\n          // Listen for account changes\r\n          window.ethereum.on('accountsChanged', (accounts) => {\r\n            setAccount(accounts[0] || null);\r\n          });\r\n          \r\n          // Listen for network changes\r\n          window.ethereum.on('chainChanged', () => {\r\n            window.location.reload();\r\n          });\r\n        } else {\r\n          setError('Please install MetaMask to use this application');\r\n        }\r\n      } catch (error) {\r\n        console.error('Error initializing web3:', error);\r\n        setError('Failed to initialize web3');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    initWeb3();\r\n    \r\n    // Cleanup listeners\r\n    return () => {\r\n      if (window.ethereum) {\r\n        window.ethereum.removeAllListeners('accountsChanged');\r\n        window.ethereum.removeAllListeners('chainChanged');\r\n      }\r\n    };\r\n  }, []);\r\n  \r\n  // Connect wallet\r\n  const connectWallet = async () => {\r\n    if (!web3) {\r\n      setError('Web3 not initialized');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      setLoading(true);\r\n      \r\n      // Request account access\r\n      const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\r\n      setAccount(accounts[0]);\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error connecting wallet:', error);\r\n      setError('Failed to connect wallet');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Disconnect wallet\r\n  const disconnectWallet = () => {\r\n    setAccount(null);\r\n  };\r\n  \r\n  // Get short address\r\n  const getShortAddress = (address) => {\r\n    if (!address) return '';\r\n    return `${address.substring(0, 6)}...${address.substring(address.length - 4)}`;\r\n  };\r\n  \r\n  // Check if connected to the correct network\r\n  const isCorrectNetwork = () => {\r\n    // Replace with your desired network ID (e.g., 1 for Ethereum Mainnet, 5 for Goerli)\r\n    const desiredNetworkId = process.env.REACT_APP_NETWORK_ID || '1';\r\n    return networkId && networkId.toString() === desiredNetworkId;\r\n  };\r\n  \r\n  // Switch network\r\n  const switchNetwork = async () => {\r\n    if (!web3) {\r\n      setError('Web3 not initialized');\r\n      return false;\r\n    }\r\n    \r\n    try {\r\n      // Replace with your desired network parameters\r\n      const desiredNetworkId = process.env.REACT_APP_NETWORK_ID || '1';\r\n      const desiredNetworkHex = `0x${parseInt(desiredNetworkId).toString(16)}`;\r\n      \r\n      await window.ethereum.request({\r\n        method: 'wallet_switchEthereumChain',\r\n        params: [{ chainId: desiredNetworkHex }],\r\n      });\r\n      \r\n      return true;\r\n    } catch (error) {\r\n      console.error('Error switching network:', error);\r\n      setError('Failed to switch network');\r\n      return false;\r\n    }\r\n  };\r\n  \r\n  // Context value\r\n  const value = {\r\n    web3,\r\n    account,\r\n    networkId,\r\n    loading,\r\n    error,\r\n    connectWallet,\r\n    disconnectWallet,\r\n    getShortAddress,\r\n    isCorrectNetwork,\r\n    switchNetwork,\r\n  };\r\n  \r\n  return (\r\n    <Web3Context.Provider value={value}>\r\n      {children}\r\n    </Web3Context.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the web3 context\r\nexport const useWeb3 = () => {\r\n  const context = useContext(Web3Context);\r\n  if (!context) {\r\n    throw new Error('useWeb3 must be used within a Web3Provider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default Web3Context; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}