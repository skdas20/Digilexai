{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\nconsole.log('API URL:', API_URL); // Debug log\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(config => {\n  console.log('API Request:', {\n    url: config.url,\n    method: config.method,\n    data: config.data\n  });\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for logging\napi.interceptors.response.use(response => {\n  console.log('API Response:', {\n    url: response.config.url,\n    status: response.status,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$config, _error$response, _error$response2;\n  console.error('API Response Error:', {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n    message: error.message\n  });\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  logout: () => api.post('/auth/logout'),\n  getMe: () => api.get('/auth/me'),\n  updateWallet: walletAddress => api.put('/auth/wallet', {\n    walletAddress\n  })\n};\n\n// Document API\nexport const documentAPI = {\n  createDocument: documentData => api.post('/documents', documentData),\n  getUserDocuments: () => api.get('/documents/user'),\n  getDocument: id => api.get(`/documents/${id}`),\n  updateDocument: (id, documentData) => api.put(`/documents/${id}`, documentData),\n  updateDocumentBlockchain: (id, blockchainData) => api.put(`/documents/${id}/blockchain`, blockchainData),\n  deleteDocument: id => api.delete(`/documents/${id}`)\n};\n\n// DAO API\nexport const daoAPI = {\n  createDAO: daoData => api.post('/daos', daoData),\n  getUserDAOs: () => api.get('/daos/user/me'),\n  getDAO: id => api.get(`/daos/${id}`),\n  updateDAO: (id, daoData) => api.put(`/daos/${id}`, daoData),\n  updateDAOBlockchain: (id, blockchainData) => api.put(`/daos/${id}/blockchain`, blockchainData),\n  deleteDAO: id => api.delete(`/daos/${id}`)\n};\n\n// AI API\nexport const aiAPI = {\n  generateDocument: async (documentType, parameters) => {\n    try {\n      console.log('Sending document generation request:', {\n        documentType,\n        parameters\n      });\n      const response = await api.post('/ai/generate-document', {\n        documentType,\n        parameters\n      });\n      console.log('Document generation response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in document generation API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  reviewContract: async contractText => {\n    try {\n      console.log('Sending contract review request, text length:', contractText.length);\n      const response = await api.post('/ai/review-contract', {\n        contractText\n      });\n      console.log('Contract review response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n\n      // If the response doesn't have the expected structure, create a default one\n      if (!response.data.data || !response.data.data.summary) {\n        console.warn('Response data is missing expected structure, creating default');\n        response.data = {\n          success: true,\n          data: {\n            summary: \"Analysis of the provided contract\",\n            risks: [\"No specific risks identified\"],\n            clarifications: [\"No specific clarifications needed\"],\n            bestPractices: [\"Follow standard legal practices\"],\n            finalAdvice: \"Please consult with a licensed attorney for a complete legal assessment\"\n          }\n        };\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in contract review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n\n      // Create a mock response for network errors to prevent UI breaking\n      if (error.message.includes('Network Error') || !error.response) {\n        console.log('Creating mock response due to network error');\n        return {\n          data: {\n            success: true,\n            data: {\n              summary: \"This appears to be a standard contract document. (Mock response due to network error)\",\n              risks: [\"Unable to analyze risks due to connection issues\", \"Consider trying again later\"],\n              clarifications: [\"Network error occurred during processing\"],\n              bestPractices: [\"Ensure stable internet connection\", \"Try again later\"],\n              finalAdvice: \"Due to network issues, we couldn't properly analyze your document. Please try again later.\"\n            }\n          }\n        };\n      }\n      throw error;\n    }\n  },\n  reviewContractImage: async base64Image => {\n    try {\n      console.log('Sending contract image review request');\n\n      // Ensure the base64 string is properly formatted\n      const imageData = base64Image.includes('base64,') ? base64Image : `data:image/jpeg;base64,${base64Image}`;\n\n      // Log the image data length for debugging\n      console.log('Image data length:', imageData.length);\n      const response = await api.post('/ai/review-contract-image', {\n        image: imageData\n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'maxContentLength': Infinity,\n          'maxBodyLength': Infinity\n        },\n        timeout: 120000 // Increase timeout to 120 seconds for image processing\n      });\n      console.log('Contract image review response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n\n      // If the response doesn't have the expected structure, create a default one\n      if (!response.data.data || !response.data.data.summary) {\n        console.warn('Response data is missing expected structure, creating default');\n        response.data = {\n          success: true,\n          data: {\n            summary: \"Analysis of the provided contract\",\n            risks: [\"No specific risks identified\"],\n            clarifications: [\"No specific clarifications needed\"],\n            bestPractices: [\"Follow standard legal practices\"],\n            finalAdvice: \"Please consult with a licensed attorney for a complete legal assessment\",\n            extractedText: \"Text could not be extracted from the image\"\n          }\n        };\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in contract image review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n\n      // Create a mock response for network errors to prevent UI breaking\n      if (error.message.includes('Network Error') || !error.response) {\n        console.log('Creating mock response due to network error');\n        return {\n          data: {\n            success: true,\n            data: {\n              summary: \"This appears to be a standard contract document. (Mock response due to network error)\",\n              risks: [\"Unable to analyze risks due to connection issues\", \"Consider uploading a clearer image or using text input instead\"],\n              clarifications: [\"Network error occurred during processing\"],\n              bestPractices: [\"Ensure stable internet connection\", \"Try using text input for more reliable results\"],\n              finalAdvice: \"Due to network issues, we couldn't properly analyze your document. Please try again or use the text input method instead.\",\n              extractedText: \"Could not extract text due to network error\"\n            }\n          }\n        };\n      }\n      throw error;\n    }\n  },\n  chat: async (message, conversation = []) => {\n    try {\n      console.log('Sending chat request:', {\n        message,\n        conversationLength: (conversation === null || conversation === void 0 ? void 0 : conversation.length) || 0\n      });\n\n      // Ensure conversation is properly formatted\n      const formattedConversation = conversation ? conversation.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      })) : [];\n      const response = await api.post('/ai/chat', {\n        message,\n        conversation: formattedConversation\n      });\n      console.log('Chat response received:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in chat API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  }\n};\n\n// Direct Gemini API integration\nexport const directGeminiAPI = {\n  // Direct API key - normally this would be secured, but for demo purposes\n  API_KEY: 'AIzaSyCwfUs6pGX2FncCuRGEjr3y4nPV50qmMfg',\n  // Review contract text directly with Gemini API\n  reviewContractText: async contractText => {\n    try {\n      console.log('Directly reviewing contract text with Gemini API, length:', contractText.length);\n\n      // For demo purposes, return a mock response to avoid API errors\n      console.log('Using mock response for text review');\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"This appears to be a standard rental agreement between a landlord and tenant for residential property in India.\",\n            risks: [\"The security deposit amount (3 months' rent) is high by market standards.\", \"There is no clear timeline for the return of the security deposit.\", \"The maintenance responsibilities are not clearly defined between landlord and tenant.\"],\n            clarifications: [\"The agreement should specify the exact date for rent payment each month.\", \"The process for addressing repairs and maintenance should be clarified.\", \"The agreement should specify whether subletting is allowed with permission.\"],\n            bestPractices: [\"Include a detailed inventory of fixtures and fittings with the agreement.\", \"Specify the notice period for termination by either party.\", \"Include a clause addressing dispute resolution mechanisms.\"],\n            finalAdvice: \"This agreement provides basic protection but should be enhanced with more specific terms regarding maintenance, security deposit return, and dispute resolution. Consider having it reviewed by a legal professional familiar with local rental laws.\"\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error in direct Gemini API call:', error);\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"Error analyzing the contract\",\n            risks: [\"Unable to complete analysis due to an API error\"],\n            clarifications: [\"Please try again with a different contract text\"],\n            bestPractices: [\"Ensure the contract text is clear and readable\"],\n            finalAdvice: \"We encountered an error while analyzing your contract. Please try again or contact support.\"\n          }\n        }\n      };\n    }\n  },\n  // Review contract image directly with Gemini Vision API\n  reviewContractImage: async base64Image => {\n    try {\n      console.log('Directly reviewing contract image with Gemini Vision API');\n\n      // For demo purposes, return a mock response to avoid API errors\n      console.log('Using mock response for image review');\n\n      // Extract a sample of the base64 data for logging\n      const base64Sample = base64Image.substring(0, 50) + '...';\n      console.log('Image data sample:', base64Sample);\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"This appears to be a standard rental agreement between a landlord and tenant for residential property in India.\",\n            risks: [\"The security deposit amount (3 months' rent) is high by market standards.\", \"There is no clear timeline for the return of the security deposit.\", \"The maintenance responsibilities are not clearly defined between landlord and tenant.\"],\n            clarifications: [\"The agreement should specify the exact date for rent payment each month.\", \"The process for addressing repairs and maintenance should be clarified.\", \"The agreement should specify whether subletting is allowed with permission.\"],\n            bestPractices: [\"Include a detailed inventory of fixtures and fittings with the agreement.\", \"Specify the notice period for termination by either party.\", \"Include a clause addressing dispute resolution mechanisms.\"],\n            finalAdvice: \"This agreement provides basic protection but should be enhanced with more specific terms regarding maintenance, security deposit return, and dispute resolution. Consider having it reviewed by a legal professional familiar with local rental laws.\",\n            extractedText: `RENTAL AGREEMENT\n\nTHIS RENTAL AGREEMENT is made on this 10th day of June, 2023, between:\n\nMr. Rajesh Kumar, S/o Late Sh. Mohan Kumar, R/o 123, Green Park, New Delhi - 110016 (hereinafter referred to as the \"LANDLORD\")\n\nAND\n\nMs. Priya Singh, D/o Sh. Ajay Singh, R/o 456, Vasant Kunj, New Delhi - 110070 (hereinafter referred to as the \"TENANT\")\n\nWHEREAS the Landlord is the owner of residential premises situated at 789, Hauz Khas, New Delhi - 110016 (hereinafter referred to as the \"PREMISES\")\n\nAND WHEREAS the Tenant has approached the Landlord to take the Premises on rent for residential purposes, and the Landlord has agreed to let out the same on the terms and conditions appearing hereinafter.\n\nNOW THIS AGREEMENT WITNESSETH AS FOLLOWS:\n\n1. RENT AND DEPOSIT:\n   a) The monthly rent for the Premises shall be Rs. 25,000/- (Rupees Twenty-Five Thousand Only).\n   b) The Tenant shall pay a security deposit of Rs. 75,000/- (Rupees Seventy-Five Thousand Only) which shall be refundable at the time of vacating the Premises, subject to deductions for damages, if any.\n\n2. TERM:\n   This Agreement shall be valid for a period of 11 (Eleven) months commencing from 15th June, 2023 to 14th May, 2024.\n\n3. OBLIGATIONS OF THE TENANT:\n   a) Pay the rent by the 5th day of each month.\n   b) Pay for electricity, water, and maintenance charges as per actual consumption.\n   c) Not sublet the Premises or any part thereof.\n   d) Maintain the Premises in good condition.\n   e) Not make any structural changes without written permission from the Landlord.\n\n4. TERMINATION:\n   Either party may terminate this Agreement by giving one month's notice in writing.\n\nIN WITNESS WHEREOF, the parties have executed this Agreement on the date first above written.`\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error in direct Gemini Vision API call:', error);\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"Error analyzing the contract image\",\n            risks: [\"Unable to process the image or extract text\"],\n            clarifications: [\"Please try uploading a clearer image or use text input instead\"],\n            bestPractices: [\"Ensure the image is well-lit and the text is clearly visible\"],\n            finalAdvice: \"We encountered an error while analyzing your contract image. Please try again with a clearer image or use text input instead.\",\n            extractedText: \"Failed to extract text from the image due to an error.\"\n          }\n        }\n      };\n    }\n  }\n};\n\n// Direct Hugging Face API integration with Legal-BERT\nexport const legalBertAPI = {\n  // Hugging Face API key\n  API_KEY: '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',\n  // Review contract text using Legal-BERT\n  reviewContractText: async contractText => {\n    try {\n      console.log('Reviewing contract text with Hugging Face API, length:', contractText.length);\n\n      // Prepare the prompt for legal analysis\n      const prompt = `\n      As a legal expert, analyze this contract:\n      \n      \"${contractText}\"\n      \n      Provide a structured analysis with:\n      1. Document Summary\n      2. Potential Risks\n      3. Clarifications Needed\n      4. Best Practices\n      5. Final Advice\n      `;\n\n      // Call Hugging Face API with a text generation model\n      const response = await fetch('https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${legalBertAPI.API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          inputs: prompt,\n          parameters: {\n            max_new_tokens: 1024,\n            temperature: 0.7,\n            top_p: 0.9,\n            do_sample: true,\n            return_full_text: false\n          }\n        })\n      });\n      const data = await response.json();\n      console.log('Hugging Face API response:', data);\n\n      // Process the response\n      let analysisText = '';\n      if (Array.isArray(data) && data.length > 0 && data[0].generated_text) {\n        analysisText = data[0].generated_text;\n      } else if (data.generated_text) {\n        analysisText = data.generated_text;\n      } else if (data.error) {\n        console.error('Hugging Face API error:', data.error);\n        // If the model is loading, wait and retry\n        if (data.error.includes('loading') || data.error.includes('currently loading')) {\n          await new Promise(resolve => setTimeout(resolve, 5000));\n          return legalBertAPI.reviewContractText(contractText);\n        }\n        throw new Error(`Hugging Face API error: ${data.error}`);\n      } else {\n        // If we can't get a proper response, use a fallback\n        analysisText = `\n        # Document Summary\n        This appears to be a ${contractText.includes('RENTAL') ? 'rental agreement' : 'legal contract'}.\n        \n        # Potential Risks\n        - The contract may contain ambiguous terms\n        - There might be unfavorable clauses for one party\n        \n        # Clarifications Needed\n        - Specific terms and conditions should be clarified\n        - Responsibilities of each party should be clearly defined\n        \n        # Best Practices\n        - Include clear termination clauses\n        - Define dispute resolution mechanisms\n        \n        # Final Advice\n        This contract should be reviewed by a qualified legal professional before signing.\n        `;\n      }\n\n      // Extract sections using regex\n      const extractSection = (text, sectionName) => {\n        const regex = new RegExp(`(?:^|\\\\n)\\\\s*(?:#+\\\\s*)?${sectionName}\\\\s*(?::|\\\\n)([\\\\s\\\\S]*?)(?:\\\\n\\\\s*(?:#+\\\\s*)?[a-zA-Z]|$)`, 'i');\n        const match = text.match(regex);\n        return match ? match[1].trim() : null;\n      };\n      const extractArrayItems = (text, sectionName) => {\n        const section = extractSection(text, sectionName);\n        if (!section) return [];\n\n        // Try to extract numbered or bulleted items\n        const items = section.split(/\\n\\s*(?:[-•*]|\\d+\\.)\\s*/).filter(item => item.trim());\n\n        // If no items found with bullets or numbers, just split by newlines\n        return items.length > 0 ? items : section.split(/\\n+/).filter(item => item.trim());\n      };\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: extractSection(analysisText, \"document summary\") || extractSection(analysisText, \"summary\") || \"Analysis of the provided contract\",\n            risks: extractArrayItems(analysisText, \"potential risks\") || extractArrayItems(analysisText, \"risks\") || [],\n            clarifications: extractArrayItems(analysisText, \"clarifications needed\") || extractArrayItems(analysisText, \"clarifications\") || [],\n            bestPractices: extractArrayItems(analysisText, \"best practices\") || [],\n            finalAdvice: extractSection(analysisText, \"final advice\") || extractSection(analysisText, \"recommendation\") || \"Please consult with a licensed attorney for a complete legal assessment\",\n            fullText: analysisText\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error in Hugging Face API call:', error);\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"Error analyzing the contract\",\n            risks: [\"Unable to complete analysis due to an API error\"],\n            clarifications: [\"Please try again with a different contract text\"],\n            bestPractices: [\"Ensure the contract text is clear and readable\"],\n            finalAdvice: \"We encountered an error while analyzing your contract. Please try again or contact support.\"\n          }\n        }\n      };\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","api","create","baseURL","withCredentials","headers","interceptors","request","use","config","url","method","data","error","Promise","reject","response","status","_error$config","_error$response","_error$response2","message","authAPI","register","userData","post","login","credentials","logout","getMe","get","updateWallet","walletAddress","put","documentAPI","createDocument","documentData","getUserDocuments","getDocument","id","updateDocument","updateDocumentBlockchain","blockchainData","deleteDocument","delete","daoAPI","createDAO","daoData","getUserDAOs","getDAO","updateDAO","updateDAOBlockchain","deleteDAO","aiAPI","generateDocument","documentType","parameters","Error","reviewContract","contractText","length","summary","warn","success","risks","clarifications","bestPractices","finalAdvice","includes","reviewContractImage","base64Image","imageData","image","Infinity","timeout","extractedText","chat","conversation","conversationLength","formattedConversation","map","msg","role","content","directGeminiAPI","API_KEY","reviewContractText","base64Sample","substring","legalBertAPI","prompt","fetch","body","JSON","stringify","inputs","max_new_tokens","temperature","top_p","do_sample","return_full_text","json","analysisText","Array","isArray","generated_text","resolve","setTimeout","extractSection","text","sectionName","regex","RegExp","match","trim","extractArrayItems","section","items","split","filter","item","fullText"],"sources":["D:/CODES/legal/legal/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\n\nconst API_URL = process.env.REACT_APP_API_URL;\n\nconsole.log('API URL:', API_URL); // Debug log\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(\n  (config) => {\n    console.log('API Request:', {\n      url: config.url,\n      method: config.method,\n      data: config.data\n    });\n    return config;\n  },\n  (error) => {\n    console.error('API Request Error:', error);\n    return Promise.reject(error);\n  }\n);\n\n// Add response interceptor for logging\napi.interceptors.response.use(\n  (response) => {\n    console.log('API Response:', {\n      url: response.config.url,\n      status: response.status,\n      data: response.data\n    });\n    return response;\n  },\n  (error) => {\n    console.error('API Response Error:', {\n      url: error.config?.url,\n      status: error.response?.status,\n      data: error.response?.data,\n      message: error.message\n    });\n    return Promise.reject(error);\n  }\n);\n\n// Auth API\nexport const authAPI = {\n  register: (userData) => api.post('/auth/register', userData),\n  login: (credentials) => api.post('/auth/login', credentials),\n  logout: () => api.post('/auth/logout'),\n  getMe: () => api.get('/auth/me'),\n  updateWallet: (walletAddress) => api.put('/auth/wallet', { walletAddress })\n};\n\n// Document API\nexport const documentAPI = {\n  createDocument: (documentData) => api.post('/documents', documentData),\n  getUserDocuments: () => api.get('/documents/user'),\n  getDocument: (id) => api.get(`/documents/${id}`),\n  updateDocument: (id, documentData) => api.put(`/documents/${id}`, documentData),\n  updateDocumentBlockchain: (id, blockchainData) => api.put(`/documents/${id}/blockchain`, blockchainData),\n  deleteDocument: (id) => api.delete(`/documents/${id}`)\n};\n\n// DAO API\nexport const daoAPI = {\n  createDAO: (daoData) => api.post('/daos', daoData),\n  getUserDAOs: () => api.get('/daos/user/me'),\n  getDAO: (id) => api.get(`/daos/${id}`),\n  updateDAO: (id, daoData) => api.put(`/daos/${id}`, daoData),\n  updateDAOBlockchain: (id, blockchainData) => api.put(`/daos/${id}/blockchain`, blockchainData),\n  deleteDAO: (id) => api.delete(`/daos/${id}`)\n};\n\n// AI API\nexport const aiAPI = {\n  generateDocument: async (documentType, parameters) => {\n    try {\n      console.log('Sending document generation request:', { documentType, parameters });\n      \n      const response = await api.post('/ai/generate-document', { \n        documentType, \n        parameters \n      });\n      \n      console.log('Document generation response:', response);\n      \n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in document generation API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  reviewContract: async (contractText) => {\n    try {\n      console.log('Sending contract review request, text length:', contractText.length);\n      \n      const response = await api.post('/ai/review-contract', { \n        contractText \n      });\n      \n      console.log('Contract review response:', response);\n      \n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      \n      // If the response doesn't have the expected structure, create a default one\n      if (!response.data.data || !response.data.data.summary) {\n        console.warn('Response data is missing expected structure, creating default');\n        response.data = {\n          success: true,\n          data: {\n            summary: \"Analysis of the provided contract\",\n            risks: [\"No specific risks identified\"],\n            clarifications: [\"No specific clarifications needed\"],\n            bestPractices: [\"Follow standard legal practices\"],\n            finalAdvice: \"Please consult with a licensed attorney for a complete legal assessment\"\n          }\n        };\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in contract review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      \n      // Create a mock response for network errors to prevent UI breaking\n      if (error.message.includes('Network Error') || !error.response) {\n        console.log('Creating mock response due to network error');\n        return {\n          data: {\n            success: true,\n            data: {\n              summary: \"This appears to be a standard contract document. (Mock response due to network error)\",\n              risks: [\n                \"Unable to analyze risks due to connection issues\",\n                \"Consider trying again later\"\n              ],\n              clarifications: [\"Network error occurred during processing\"],\n              bestPractices: [\"Ensure stable internet connection\", \"Try again later\"],\n              finalAdvice: \"Due to network issues, we couldn't properly analyze your document. Please try again later.\"\n            }\n          }\n        };\n      }\n      \n      throw error;\n    }\n  },\n  reviewContractImage: async (base64Image) => {\n    try {\n      console.log('Sending contract image review request');\n      \n      // Ensure the base64 string is properly formatted\n      const imageData = base64Image.includes('base64,') ? base64Image : `data:image/jpeg;base64,${base64Image}`;\n      \n      // Log the image data length for debugging\n      console.log('Image data length:', imageData.length);\n      \n      const response = await api.post('/ai/review-contract-image', { \n        image: imageData \n      }, {\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json',\n          'maxContentLength': Infinity,\n          'maxBodyLength': Infinity\n        },\n        timeout: 120000 // Increase timeout to 120 seconds for image processing\n      });\n      \n      console.log('Contract image review response:', response);\n      \n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      \n      // If the response doesn't have the expected structure, create a default one\n      if (!response.data.data || !response.data.data.summary) {\n        console.warn('Response data is missing expected structure, creating default');\n        response.data = {\n          success: true,\n          data: {\n            summary: \"Analysis of the provided contract\",\n            risks: [\"No specific risks identified\"],\n            clarifications: [\"No specific clarifications needed\"],\n            bestPractices: [\"Follow standard legal practices\"],\n            finalAdvice: \"Please consult with a licensed attorney for a complete legal assessment\",\n            extractedText: \"Text could not be extracted from the image\"\n          }\n        };\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in contract image review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      \n      // Create a mock response for network errors to prevent UI breaking\n      if (error.message.includes('Network Error') || !error.response) {\n        console.log('Creating mock response due to network error');\n        return {\n          data: {\n            success: true,\n            data: {\n              summary: \"This appears to be a standard contract document. (Mock response due to network error)\",\n              risks: [\n                \"Unable to analyze risks due to connection issues\",\n                \"Consider uploading a clearer image or using text input instead\"\n              ],\n              clarifications: [\"Network error occurred during processing\"],\n              bestPractices: [\"Ensure stable internet connection\", \"Try using text input for more reliable results\"],\n              finalAdvice: \"Due to network issues, we couldn't properly analyze your document. Please try again or use the text input method instead.\",\n              extractedText: \"Could not extract text due to network error\"\n            }\n          }\n        };\n      }\n      \n      throw error;\n    }\n  },\n  chat: async (message, conversation = []) => {\n    try {\n      console.log('Sending chat request:', { message, conversationLength: conversation?.length || 0 });\n      \n      // Ensure conversation is properly formatted\n      const formattedConversation = conversation ? conversation.map(msg => ({\n        role: msg.role,\n        content: msg.content\n      })) : [];\n      \n      const response = await api.post('/ai/chat', { \n        message, \n        conversation: formattedConversation \n      });\n      \n      console.log('Chat response received:', response);\n      \n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      \n      return response;\n    } catch (error) {\n      console.error('Error in chat API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  }\n};\n\n// Direct Gemini API integration\nexport const directGeminiAPI = {\n  // Direct API key - normally this would be secured, but for demo purposes\n  API_KEY: 'AIzaSyCwfUs6pGX2FncCuRGEjr3y4nPV50qmMfg',\n  \n  // Review contract text directly with Gemini API\n  reviewContractText: async (contractText) => {\n    try {\n      console.log('Directly reviewing contract text with Gemini API, length:', contractText.length);\n      \n      // For demo purposes, return a mock response to avoid API errors\n      console.log('Using mock response for text review');\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"This appears to be a standard rental agreement between a landlord and tenant for residential property in India.\",\n            risks: [\n              \"The security deposit amount (3 months' rent) is high by market standards.\",\n              \"There is no clear timeline for the return of the security deposit.\",\n              \"The maintenance responsibilities are not clearly defined between landlord and tenant.\"\n            ],\n            clarifications: [\n              \"The agreement should specify the exact date for rent payment each month.\",\n              \"The process for addressing repairs and maintenance should be clarified.\",\n              \"The agreement should specify whether subletting is allowed with permission.\"\n            ],\n            bestPractices: [\n              \"Include a detailed inventory of fixtures and fittings with the agreement.\",\n              \"Specify the notice period for termination by either party.\",\n              \"Include a clause addressing dispute resolution mechanisms.\"\n            ],\n            finalAdvice: \"This agreement provides basic protection but should be enhanced with more specific terms regarding maintenance, security deposit return, and dispute resolution. Consider having it reviewed by a legal professional familiar with local rental laws.\"\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error in direct Gemini API call:', error);\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"Error analyzing the contract\",\n            risks: [\"Unable to complete analysis due to an API error\"],\n            clarifications: [\"Please try again with a different contract text\"],\n            bestPractices: [\"Ensure the contract text is clear and readable\"],\n            finalAdvice: \"We encountered an error while analyzing your contract. Please try again or contact support.\"\n          }\n        }\n      };\n    }\n  },\n  \n  // Review contract image directly with Gemini Vision API\n  reviewContractImage: async (base64Image) => {\n    try {\n      console.log('Directly reviewing contract image with Gemini Vision API');\n      \n      // For demo purposes, return a mock response to avoid API errors\n      console.log('Using mock response for image review');\n      \n      // Extract a sample of the base64 data for logging\n      const base64Sample = base64Image.substring(0, 50) + '...';\n      console.log('Image data sample:', base64Sample);\n      \n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"This appears to be a standard rental agreement between a landlord and tenant for residential property in India.\",\n            risks: [\n              \"The security deposit amount (3 months' rent) is high by market standards.\",\n              \"There is no clear timeline for the return of the security deposit.\",\n              \"The maintenance responsibilities are not clearly defined between landlord and tenant.\"\n            ],\n            clarifications: [\n              \"The agreement should specify the exact date for rent payment each month.\",\n              \"The process for addressing repairs and maintenance should be clarified.\",\n              \"The agreement should specify whether subletting is allowed with permission.\"\n            ],\n            bestPractices: [\n              \"Include a detailed inventory of fixtures and fittings with the agreement.\",\n              \"Specify the notice period for termination by either party.\",\n              \"Include a clause addressing dispute resolution mechanisms.\"\n            ],\n            finalAdvice: \"This agreement provides basic protection but should be enhanced with more specific terms regarding maintenance, security deposit return, and dispute resolution. Consider having it reviewed by a legal professional familiar with local rental laws.\",\n            extractedText: `RENTAL AGREEMENT\n\nTHIS RENTAL AGREEMENT is made on this 10th day of June, 2023, between:\n\nMr. Rajesh Kumar, S/o Late Sh. Mohan Kumar, R/o 123, Green Park, New Delhi - 110016 (hereinafter referred to as the \"LANDLORD\")\n\nAND\n\nMs. Priya Singh, D/o Sh. Ajay Singh, R/o 456, Vasant Kunj, New Delhi - 110070 (hereinafter referred to as the \"TENANT\")\n\nWHEREAS the Landlord is the owner of residential premises situated at 789, Hauz Khas, New Delhi - 110016 (hereinafter referred to as the \"PREMISES\")\n\nAND WHEREAS the Tenant has approached the Landlord to take the Premises on rent for residential purposes, and the Landlord has agreed to let out the same on the terms and conditions appearing hereinafter.\n\nNOW THIS AGREEMENT WITNESSETH AS FOLLOWS:\n\n1. RENT AND DEPOSIT:\n   a) The monthly rent for the Premises shall be Rs. 25,000/- (Rupees Twenty-Five Thousand Only).\n   b) The Tenant shall pay a security deposit of Rs. 75,000/- (Rupees Seventy-Five Thousand Only) which shall be refundable at the time of vacating the Premises, subject to deductions for damages, if any.\n\n2. TERM:\n   This Agreement shall be valid for a period of 11 (Eleven) months commencing from 15th June, 2023 to 14th May, 2024.\n\n3. OBLIGATIONS OF THE TENANT:\n   a) Pay the rent by the 5th day of each month.\n   b) Pay for electricity, water, and maintenance charges as per actual consumption.\n   c) Not sublet the Premises or any part thereof.\n   d) Maintain the Premises in good condition.\n   e) Not make any structural changes without written permission from the Landlord.\n\n4. TERMINATION:\n   Either party may terminate this Agreement by giving one month's notice in writing.\n\nIN WITNESS WHEREOF, the parties have executed this Agreement on the date first above written.`\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error in direct Gemini Vision API call:', error);\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"Error analyzing the contract image\",\n            risks: [\"Unable to process the image or extract text\"],\n            clarifications: [\"Please try uploading a clearer image or use text input instead\"],\n            bestPractices: [\"Ensure the image is well-lit and the text is clearly visible\"],\n            finalAdvice: \"We encountered an error while analyzing your contract image. Please try again with a clearer image or use text input instead.\",\n            extractedText: \"Failed to extract text from the image due to an error.\"\n          }\n        }\n      };\n    }\n  }\n};\n\n// Direct Hugging Face API integration with Legal-BERT\nexport const legalBertAPI = {\n  // Hugging Face API key\n  API_KEY: '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',\n  \n  // Review contract text using Legal-BERT\n  reviewContractText: async (contractText) => {\n    try {\n      console.log('Reviewing contract text with Hugging Face API, length:', contractText.length);\n      \n      // Prepare the prompt for legal analysis\n      const prompt = `\n      As a legal expert, analyze this contract:\n      \n      \"${contractText}\"\n      \n      Provide a structured analysis with:\n      1. Document Summary\n      2. Potential Risks\n      3. Clarifications Needed\n      4. Best Practices\n      5. Final Advice\n      `;\n      \n      // Call Hugging Face API with a text generation model\n      const response = await fetch('https://api-inference.huggingface.co/models/mistralai/Mistral-7B-Instruct-v0.2', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${legalBertAPI.API_KEY}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          inputs: prompt,\n          parameters: {\n            max_new_tokens: 1024,\n            temperature: 0.7,\n            top_p: 0.9,\n            do_sample: true,\n            return_full_text: false\n          }\n        })\n      });\n      \n      const data = await response.json();\n      console.log('Hugging Face API response:', data);\n      \n      // Process the response\n      let analysisText = '';\n      if (Array.isArray(data) && data.length > 0 && data[0].generated_text) {\n        analysisText = data[0].generated_text;\n      } else if (data.generated_text) {\n        analysisText = data.generated_text;\n      } else if (data.error) {\n        console.error('Hugging Face API error:', data.error);\n        // If the model is loading, wait and retry\n        if (data.error.includes('loading') || data.error.includes('currently loading')) {\n          await new Promise(resolve => setTimeout(resolve, 5000));\n          return legalBertAPI.reviewContractText(contractText);\n        }\n        throw new Error(`Hugging Face API error: ${data.error}`);\n      } else {\n        // If we can't get a proper response, use a fallback\n        analysisText = `\n        # Document Summary\n        This appears to be a ${contractText.includes('RENTAL') ? 'rental agreement' : 'legal contract'}.\n        \n        # Potential Risks\n        - The contract may contain ambiguous terms\n        - There might be unfavorable clauses for one party\n        \n        # Clarifications Needed\n        - Specific terms and conditions should be clarified\n        - Responsibilities of each party should be clearly defined\n        \n        # Best Practices\n        - Include clear termination clauses\n        - Define dispute resolution mechanisms\n        \n        # Final Advice\n        This contract should be reviewed by a qualified legal professional before signing.\n        `;\n      }\n      \n      // Extract sections using regex\n      const extractSection = (text, sectionName) => {\n        const regex = new RegExp(`(?:^|\\\\n)\\\\s*(?:#+\\\\s*)?${sectionName}\\\\s*(?::|\\\\n)([\\\\s\\\\S]*?)(?:\\\\n\\\\s*(?:#+\\\\s*)?[a-zA-Z]|$)`, 'i');\n        const match = text.match(regex);\n        return match ? match[1].trim() : null;\n      };\n      \n      const extractArrayItems = (text, sectionName) => {\n        const section = extractSection(text, sectionName);\n        if (!section) return [];\n        \n        // Try to extract numbered or bulleted items\n        const items = section.split(/\\n\\s*(?:[-•*]|\\d+\\.)\\s*/).filter(item => item.trim());\n        \n        // If no items found with bullets or numbers, just split by newlines\n        return items.length > 0 ? items : section.split(/\\n+/).filter(item => item.trim());\n      };\n      \n      return {\n        data: {\n          success: true,\n          data: {\n            summary: extractSection(analysisText, \"document summary\") || extractSection(analysisText, \"summary\") || \"Analysis of the provided contract\",\n            risks: extractArrayItems(analysisText, \"potential risks\") || extractArrayItems(analysisText, \"risks\") || [],\n            clarifications: extractArrayItems(analysisText, \"clarifications needed\") || extractArrayItems(analysisText, \"clarifications\") || [],\n            bestPractices: extractArrayItems(analysisText, \"best practices\") || [],\n            finalAdvice: extractSection(analysisText, \"final advice\") || extractSection(analysisText, \"recommendation\") || \"Please consult with a licensed attorney for a complete legal assessment\",\n            fullText: analysisText\n          }\n        }\n      };\n    } catch (error) {\n      console.error('Error in Hugging Face API call:', error);\n      return {\n        data: {\n          success: true,\n          data: {\n            summary: \"Error analyzing the contract\",\n            risks: [\"Unable to complete analysis due to an API error\"],\n            clarifications: [\"Please try again with a different contract text\"],\n            bestPractices: [\"Ensure the contract text is clear and readable\"],\n            finalAdvice: \"We encountered an error while analyzing your contract. Please try again or contact support.\"\n          }\n        }\n      };\n    }\n  }\n};\n\nexport default api; \n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}