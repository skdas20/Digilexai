{"ast":null,"code":"var _jsxFileName = \"D:\\\\CODES\\\\legal\\\\legal\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { authAPI } from '../utils/api';\n\n// Create context\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Load user on mount\n  useEffect(() => {\n    const loadUser = async () => {\n      try {\n        const result = await authAPI.getCurrentUser();\n        if (result.success) {\n          setUser(result.data);\n          setIsAuthenticated(true);\n        }\n      } catch (error) {\n        console.error('Error loading user:', error);\n        setError('Failed to load user');\n      } finally {\n        setLoading(false);\n      }\n    };\n    loadUser();\n  }, []);\n\n  // Register user\n  const register = async userData => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await authAPI.register(userData);\n      if (result.success) {\n        setUser(result.data);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        setError(result.message);\n        return {\n          success: false,\n          message: result.message\n        };\n      }\n    } catch (error) {\n      console.error('Error registering user:', error);\n      const message = error.message || 'Registration failed';\n      setError(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Login user\n  const login = async credentials => {\n    setLoading(true);\n    setError(null);\n    try {\n      const result = await authAPI.login(credentials);\n      if (result.success) {\n        setUser(result.data);\n        setIsAuthenticated(true);\n        return {\n          success: true\n        };\n      } else {\n        setError(result.message);\n        return {\n          success: false,\n          message: result.message\n        };\n      }\n    } catch (error) {\n      console.error('Error logging in:', error);\n      const message = error.message || 'Login failed';\n      setError(message);\n      return {\n        success: false,\n        message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout user\n  const logout = async () => {\n    setLoading(true);\n    try {\n      await authAPI.logout();\n      setUser(null);\n      setIsAuthenticated(false);\n      return {\n        success: true\n      };\n    } catch (error) {\n      console.error('Error logging out:', error);\n      return {\n        success: false,\n        message: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user\n  const updateUser = userData => {\n    setUser(userData);\n  };\n\n  // Context value\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    error,\n    register,\n    login,\n    logout,\n    updateUser\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 122,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use the auth context\n_s(AuthProvider, \"AaZCefjEQIISzggwPe9U62ieYJk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","authAPI","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","loadUser","result","getCurrentUser","success","data","console","register","userData","message","login","credentials","logout","updateUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["D:/CODES/legal/legal/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\nimport { authAPI } from '../utils/api';\r\n\r\n// Create context\r\nconst AuthContext = createContext();\r\n\r\n// Provider component\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Load user on mount\r\n  useEffect(() => {\r\n    const loadUser = async () => {\r\n      try {\r\n        const result = await authAPI.getCurrentUser();\r\n        \r\n        if (result.success) {\r\n          setUser(result.data);\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (error) {\r\n        console.error('Error loading user:', error);\r\n        setError('Failed to load user');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n    \r\n    loadUser();\r\n  }, []);\r\n  \r\n  // Register user\r\n  const register = async (userData) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const result = await authAPI.register(userData);\r\n      \r\n      if (result.success) {\r\n        setUser(result.data);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      } else {\r\n        setError(result.message);\r\n        return { success: false, message: result.message };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error registering user:', error);\r\n      const message = error.message || 'Registration failed';\r\n      setError(message);\r\n      return { success: false, message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Login user\r\n  const login = async (credentials) => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const result = await authAPI.login(credentials);\r\n      \r\n      if (result.success) {\r\n        setUser(result.data);\r\n        setIsAuthenticated(true);\r\n        return { success: true };\r\n      } else {\r\n        setError(result.message);\r\n        return { success: false, message: result.message };\r\n      }\r\n    } catch (error) {\r\n      console.error('Error logging in:', error);\r\n      const message = error.message || 'Login failed';\r\n      setError(message);\r\n      return { success: false, message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Logout user\r\n  const logout = async () => {\r\n    setLoading(true);\r\n    \r\n    try {\r\n      await authAPI.logout();\r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      return { success: true };\r\n    } catch (error) {\r\n      console.error('Error logging out:', error);\r\n      return { success: false, message: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n  \r\n  // Update user\r\n  const updateUser = (userData) => {\r\n    setUser(userData);\r\n  };\r\n  \r\n  // Context value\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    error,\r\n    register,\r\n    login,\r\n    logout,\r\n    updateUser,\r\n  };\r\n  \r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\n// Custom hook to use the auth context\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}