{"ast":null,"code":"import axios from 'axios';\nconst API_URL = process.env.REACT_APP_API_URL;\nconsole.log('API URL:', API_URL); // Debug log\n\n// Create axios instance with base URL\nconst api = axios.create({\n  baseURL: API_URL,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Add request interceptor for logging\napi.interceptors.request.use(config => {\n  console.log('API Request:', {\n    url: config.url,\n    method: config.method,\n    data: config.data\n  });\n  return config;\n}, error => {\n  console.error('API Request Error:', error);\n  return Promise.reject(error);\n});\n\n// Add response interceptor for logging\napi.interceptors.response.use(response => {\n  console.log('API Response:', {\n    url: response.config.url,\n    status: response.status,\n    data: response.data\n  });\n  return response;\n}, error => {\n  var _error$config, _error$response, _error$response2;\n  console.error('API Response Error:', {\n    url: (_error$config = error.config) === null || _error$config === void 0 ? void 0 : _error$config.url,\n    status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status,\n    data: (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data,\n    message: error.message\n  });\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  register: userData => api.post('/auth/register', userData),\n  login: credentials => api.post('/auth/login', credentials),\n  logout: () => api.post('/auth/logout'),\n  getMe: () => api.get('/auth/me'),\n  updateWallet: walletAddress => api.put('/auth/wallet', {\n    walletAddress\n  })\n};\n\n// Document API\nexport const documentAPI = {\n  createDocument: documentData => api.post('/documents', documentData),\n  getUserDocuments: () => api.get('/documents/user'),\n  getDocument: id => api.get(`/documents/${id}`),\n  updateDocument: (id, documentData) => api.put(`/documents/${id}`, documentData),\n  updateDocumentBlockchain: (id, blockchainData) => api.put(`/documents/${id}/blockchain`, blockchainData),\n  deleteDocument: id => api.delete(`/documents/${id}`)\n};\n\n// DAO API\nexport const daoAPI = {\n  createDAO: daoData => api.post('/daos', daoData),\n  getUserDAOs: () => api.get('/daos/user/me'),\n  getDAO: id => api.get(`/daos/${id}`),\n  updateDAO: (id, daoData) => api.put(`/daos/${id}`, daoData),\n  updateDAOBlockchain: (id, blockchainData) => api.put(`/daos/${id}/blockchain`, blockchainData),\n  deleteDAO: id => api.delete(`/daos/${id}`)\n};\n\n// AI API\nexport const aiAPI = {\n  generateDocument: async (documentType, parameters) => {\n    try {\n      console.log('Sending document generation request:', {\n        documentType,\n        parameters\n      });\n      const response = await api.post('/ai/generate-document', {\n        documentType,\n        parameters\n      });\n      console.log('Document generation response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in document generation API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  reviewContract: async contractText => {\n    try {\n      console.log('Sending contract review request, text length:', contractText.length);\n      const response = await api.post('/ai/review-contract', {\n        contractText\n      });\n      console.log('Contract review response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in contract review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  reviewContractImage: async base64Image => {\n    try {\n      console.log('Sending contract image review request');\n\n      // Use a different instance with multipart/form-data for image upload\n      const response = await axios({\n        method: 'post',\n        url: `${API_URL}/ai/review-contract-image`,\n        data: {\n          image: base64Image\n        },\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        withCredentials: true,\n        timeout: 60000 // Increase timeout to 60 seconds for image processing\n      });\n      console.log('Contract image review response:', response);\n      if (!response.data) {\n        throw new Error('No data received in response');\n      }\n      return response;\n    } catch (error) {\n      console.error('Error in contract image review API call:', {\n        message: error.message,\n        response: error.response,\n        config: error.config\n      });\n      throw error;\n    }\n  },\n  chat: async (message, conversation) => {\n    // Retry configuration\n    const maxRetries = 3;\n    let retries = 0;\n    let lastError = null;\n    while (retries <= maxRetries) {\n      try {\n        console.log(`Sending chat request (attempt ${retries + 1}/${maxRetries + 1}):`, {\n          message,\n          conversationLength: conversation.length\n        });\n\n        // Ensure conversation is properly formatted\n        const formattedConversation = conversation.map(msg => ({\n          role: msg.role,\n          content: msg.content\n        }));\n\n        // Use a direct axios call with timeout for better control\n        const response = await axios({\n          method: 'post',\n          url: `${API_URL}/ai/chat`,\n          data: {\n            message,\n            conversation: formattedConversation\n          },\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          withCredentials: true,\n          timeout: 60000 // Increased to 60 second timeout for chat responses\n        });\n        console.log('Chat response received:', {\n          status: response.status,\n          statusText: response.statusText,\n          hasData: !!response.data,\n          dataType: typeof response.data,\n          dataKeys: response.data ? Object.keys(response.data) : []\n        });\n        if (!response.data) {\n          throw new Error('No data received in response');\n        }\n        return response;\n      } catch (error) {\n        var _error$response3, _error$response4;\n        retries++;\n        console.error(`Error in chat API call (attempt ${retries}/${maxRetries + 1}):`, {\n          message: error.message,\n          response: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || 'No response data',\n          status: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : _error$response4.status) || 'No status code',\n          config: error.config\n        });\n\n        // Only retry on network errors, timeouts, or 5xx server errors\n        const shouldRetry = !error.response ||\n        // Network error\n        error.code === 'ECONNABORTED' ||\n        // Timeout\n        error.response && error.response.status >= 500; // Server error\n\n        if (shouldRetry && retries <= maxRetries) {\n          // Exponential backoff: wait longer between each retry\n          const delay = 1000 * Math.pow(2, retries);\n          console.log(`Retrying in ${delay}ms...`);\n          await new Promise(resolve => setTimeout(resolve, delay));\n          continue;\n        }\n\n        // Provide more specific error messages based on the error type\n        if (error.code === 'ECONNABORTED') {\n          throw new Error('Request timed out. The server took too long to respond.');\n        } else if (error.response) {\n          var _error$response$data;\n          // The server responded with a status code outside the 2xx range\n          throw new Error(`Server error: ${error.response.status} - ${((_error$response$data = error.response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.message) || 'Unknown error'}`);\n        } else if (error.request) {\n          // The request was made but no response was received\n          throw new Error('No response received from server. Please check your network connection.');\n        } else {\n          // Something else happened while setting up the request\n          throw error;\n        }\n      }\n    }\n\n    // If we've exhausted all retries\n    throw new Error('Failed to get a response after multiple attempts. Please try again later.');\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_URL","process","env","REACT_APP_API_URL","console","log","api","create","baseURL","withCredentials","headers","interceptors","request","use","config","url","method","data","error","Promise","reject","response","status","_error$config","_error$response","_error$response2","message","authAPI","register","userData","post","login","credentials","logout","getMe","get","updateWallet","walletAddress","put","documentAPI","createDocument","documentData","getUserDocuments","getDocument","id","updateDocument","updateDocumentBlockchain","blockchainData","deleteDocument","delete","daoAPI","createDAO","daoData","getUserDAOs","getDAO","updateDAO","updateDAOBlockchain","deleteDAO","aiAPI","generateDocument","documentType","parameters","Error","reviewContract","contractText","length","reviewContractImage","base64Image","image","timeout","chat","conversation","maxRetries","retries","lastError","conversationLength","formattedConversation","map","msg","role","content","statusText","hasData","dataType","dataKeys","Object","keys","_error$response3","_error$response4","shouldRetry","code","delay","Math","pow","resolve","setTimeout","_error$response$data"],"sources":["D:/CODES/legal/legal/frontend/src/utils/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_URL = process.env.REACT_APP_API_URL;\r\n\r\nconsole.log('API URL:', API_URL); // Debug log\r\n\r\n// Create axios instance with base URL\r\nconst api = axios.create({\r\n  baseURL: API_URL,\r\n  withCredentials: true,\r\n  headers: {\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\n// Add request interceptor for logging\r\napi.interceptors.request.use(\r\n  (config) => {\r\n    console.log('API Request:', {\r\n      url: config.url,\r\n      method: config.method,\r\n      data: config.data\r\n    });\r\n    return config;\r\n  },\r\n  (error) => {\r\n    console.error('API Request Error:', error);\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Add response interceptor for logging\r\napi.interceptors.response.use(\r\n  (response) => {\r\n    console.log('API Response:', {\r\n      url: response.config.url,\r\n      status: response.status,\r\n      data: response.data\r\n    });\r\n    return response;\r\n  },\r\n  (error) => {\r\n    console.error('API Response Error:', {\r\n      url: error.config?.url,\r\n      status: error.response?.status,\r\n      data: error.response?.data,\r\n      message: error.message\r\n    });\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  register: (userData) => api.post('/auth/register', userData),\r\n  login: (credentials) => api.post('/auth/login', credentials),\r\n  logout: () => api.post('/auth/logout'),\r\n  getMe: () => api.get('/auth/me'),\r\n  updateWallet: (walletAddress) => api.put('/auth/wallet', { walletAddress })\r\n};\r\n\r\n// Document API\r\nexport const documentAPI = {\r\n  createDocument: (documentData) => api.post('/documents', documentData),\r\n  getUserDocuments: () => api.get('/documents/user'),\r\n  getDocument: (id) => api.get(`/documents/${id}`),\r\n  updateDocument: (id, documentData) => api.put(`/documents/${id}`, documentData),\r\n  updateDocumentBlockchain: (id, blockchainData) => api.put(`/documents/${id}/blockchain`, blockchainData),\r\n  deleteDocument: (id) => api.delete(`/documents/${id}`)\r\n};\r\n\r\n// DAO API\r\nexport const daoAPI = {\r\n  createDAO: (daoData) => api.post('/daos', daoData),\r\n  getUserDAOs: () => api.get('/daos/user/me'),\r\n  getDAO: (id) => api.get(`/daos/${id}`),\r\n  updateDAO: (id, daoData) => api.put(`/daos/${id}`, daoData),\r\n  updateDAOBlockchain: (id, blockchainData) => api.put(`/daos/${id}/blockchain`, blockchainData),\r\n  deleteDAO: (id) => api.delete(`/daos/${id}`)\r\n};\r\n\r\n// AI API\r\nexport const aiAPI = {\r\n  generateDocument: async (documentType, parameters) => {\r\n    try {\r\n      console.log('Sending document generation request:', { documentType, parameters });\r\n      \r\n      const response = await api.post('/ai/generate-document', { \r\n        documentType, \r\n        parameters \r\n      });\r\n      \r\n      console.log('Document generation response:', response);\r\n      \r\n      if (!response.data) {\r\n        throw new Error('No data received in response');\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error in document generation API call:', {\r\n        message: error.message,\r\n        response: error.response,\r\n        config: error.config\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n  reviewContract: async (contractText) => {\r\n    try {\r\n      console.log('Sending contract review request, text length:', contractText.length);\r\n      \r\n      const response = await api.post('/ai/review-contract', { \r\n        contractText \r\n      });\r\n      \r\n      console.log('Contract review response:', response);\r\n      \r\n      if (!response.data) {\r\n        throw new Error('No data received in response');\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error in contract review API call:', {\r\n        message: error.message,\r\n        response: error.response,\r\n        config: error.config\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n  reviewContractImage: async (base64Image) => {\r\n    try {\r\n      console.log('Sending contract image review request');\r\n      \r\n      // Use a different instance with multipart/form-data for image upload\r\n      const response = await axios({\r\n        method: 'post',\r\n        url: `${API_URL}/ai/review-contract-image`,\r\n        data: { image: base64Image },\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        withCredentials: true,\r\n        timeout: 60000, // Increase timeout to 60 seconds for image processing\r\n      });\r\n      \r\n      console.log('Contract image review response:', response);\r\n      \r\n      if (!response.data) {\r\n        throw new Error('No data received in response');\r\n      }\r\n      \r\n      return response;\r\n    } catch (error) {\r\n      console.error('Error in contract image review API call:', {\r\n        message: error.message,\r\n        response: error.response,\r\n        config: error.config\r\n      });\r\n      throw error;\r\n    }\r\n  },\r\n  chat: async (message, conversation) => {\r\n    // Retry configuration\r\n    const maxRetries = 3;\r\n    let retries = 0;\r\n    let lastError = null;\r\n\r\n    while (retries <= maxRetries) {\r\n      try {\r\n        console.log(`Sending chat request (attempt ${retries + 1}/${maxRetries + 1}):`, { \r\n          message, \r\n          conversationLength: conversation.length \r\n        });\r\n        \r\n        // Ensure conversation is properly formatted\r\n        const formattedConversation = conversation.map(msg => ({\r\n          role: msg.role,\r\n          content: msg.content\r\n        }));\r\n        \r\n        // Use a direct axios call with timeout for better control\r\n        const response = await axios({\r\n          method: 'post',\r\n          url: `${API_URL}/ai/chat`,\r\n          data: { \r\n            message, \r\n            conversation: formattedConversation \r\n          },\r\n          headers: {\r\n            'Content-Type': 'application/json',\r\n          },\r\n          withCredentials: true,\r\n          timeout: 60000, // Increased to 60 second timeout for chat responses\r\n        });\r\n        \r\n        console.log('Chat response received:', {\r\n          status: response.status,\r\n          statusText: response.statusText,\r\n          hasData: !!response.data,\r\n          dataType: typeof response.data,\r\n          dataKeys: response.data ? Object.keys(response.data) : []\r\n        });\r\n        \r\n        if (!response.data) {\r\n          throw new Error('No data received in response');\r\n        }\r\n        \r\n        return response;\r\n      } catch (error) {\r\n        retries++;\r\n        console.error(`Error in chat API call (attempt ${retries}/${maxRetries + 1}):`, {\r\n          message: error.message,\r\n          response: error.response?.data || 'No response data',\r\n          status: error.response?.status || 'No status code',\r\n          config: error.config\r\n        });\r\n        \r\n        // Only retry on network errors, timeouts, or 5xx server errors\r\n        const shouldRetry = \r\n          !error.response || // Network error\r\n          error.code === 'ECONNABORTED' || // Timeout\r\n          (error.response && error.response.status >= 500); // Server error\r\n        \r\n        if (shouldRetry && retries <= maxRetries) {\r\n          // Exponential backoff: wait longer between each retry\r\n          const delay = 1000 * Math.pow(2, retries);\r\n          console.log(`Retrying in ${delay}ms...`);\r\n          await new Promise(resolve => setTimeout(resolve, delay));\r\n          continue;\r\n        }\r\n        \r\n        // Provide more specific error messages based on the error type\r\n        if (error.code === 'ECONNABORTED') {\r\n          throw new Error('Request timed out. The server took too long to respond.');\r\n        } else if (error.response) {\r\n          // The server responded with a status code outside the 2xx range\r\n          throw new Error(`Server error: ${error.response.status} - ${error.response.data?.message || 'Unknown error'}`);\r\n        } else if (error.request) {\r\n          // The request was made but no response was received\r\n          throw new Error('No response received from server. Please check your network connection.');\r\n        } else {\r\n          // Something else happened while setting up the request\r\n          throw error;\r\n        }\r\n      }\r\n    }\r\n    \r\n    // If we've exhausted all retries\r\n    throw new Error('Failed to get a response after multiple attempts. Please try again later.');\r\n  }\r\n};\r\n\r\nexport default api; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}